import React, { useState, useEffect } from 'react';
import { 
  Brain, Sparkles, Zap, RefreshCw, Download, Upload, 
  BarChart3, CheckCircle, AlertCircle, Loader2, Eye,
  Package, Tag, DollarSign, Image, Settings, Search,
  Filter, ChevronDown, ChevronUp, ExternalLink
} from 'lucide-react';
import { useNotifications } from './NotificationSystem';

interface SmartProduct {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  vendor: string;
  image_url: string;
  stock: number;
  ai_attributes: {
    colors: string[];
    materials: string[];
    dimensions: {
      largeur?: number;
      profondeur?: number;
      hauteur?: number;
      hauteur_assise?: number;
      couchage_largeur?: number;
      couchage_longueur?: number;
      diametre?: number;
    };
    styles: string[];
    features: string[];
    room: string[];
    confidence_score: number;
  };
  variations: Array<{
    id: string;
    title: string;
    price: number;
    stock: number;
    options: { name: string; value: string }[];
  }>;
  seo_optimized: {
    title: string;
    description: string;
    tags: string[];
  };
  enriched_at: string;
}

export const SmartAIEnrichmentTab: React.FC = () => {
  const [products, setProducts] = useState<SmartProduct[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isEnriching, setIsEnriching] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<SmartProduct | null>(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
  const [selectedProducts, setSelectedProducts] = useState<string[]>([]);
  const [isAnalyzingVision, setIsAnalyzingVision] = useState(false);
  const [visionAnalysisResults, setVisionAnalysisResults] = useState<{[key: string]: string}>({});
  const { showSuccess, showError, showInfo } = useNotifications();

  useEffect(() => {
    loadSmartProducts();
  }, []);

  const loadSmartProducts = async () => {
    try {
      setIsLoading(true);
      console.log('üß† Chargement Smart AI Products...');
      
      // Charger depuis toutes les sources de produits
      const allProducts = await loadAllProductSources();
      console.log('üì¶ Produits bruts charg√©s:', allProducts.length);
      
      // Enrichir automatiquement avec IA avanc√©e
      const smartProducts = await enrichProductsWithAdvancedAI(allProducts);
      console.log('ü§ñ Produits enrichis par IA:', smartProducts.length);
      
      setProducts(smartProducts);
      
    } catch (error) {
      console.error('‚ùå Erreur chargement Smart AI:', error);
      showError('Erreur de chargement', 'Impossible de charger les produits Smart AI.');
    } finally {
      setIsLoading(false);
    }
  };

  const loadAllProductSources = async (): Promise<any[]> => {
    let allProducts: any[] = [];
    
    // Sources multiples
    const sources = [
      'catalog_products',
      'shopify_products',
      'imported_products',
      'vendor_products',
      'seller_products'
    ];
    
    for (const source of sources) {
      try {
        const savedData = localStorage.getItem(source);
        if (savedData) {
          const parsed = JSON.parse(savedData);
          if (Array.isArray(parsed)) {
            console.log(`üì¶ ${source}: ${parsed.length} produits`);
            allProducts = [...allProducts, ...parsed];
          }
        }
      } catch (error) {
        console.error(`‚ùå Erreur parsing ${source}:`, error);
      }
    }
    
    // Ajouter produits Decora avec variations compl√®tes
    const decoraProducts = getDecoraCatalogWithFullVariations();
    allProducts = [...allProducts, ...decoraProducts];
    
    // Supprimer doublons
    const uniqueProducts = allProducts.filter((product, index, self) => 
      index === self.findIndex(p => p.id === product.id)
    );
    
    console.log(`üìä Produits uniques: ${uniqueProducts.length}`);
    return uniqueProducts;
  };

  const getDecoraCatalogWithFullVariations = () => {
    return [
      // Canap√© VENTU avec description compl√®te
      {
        id: 'decora-canape-ventu-gris',
        handle: 'canape-ventu-convertible',
        name: 'Canap√© VENTU convertible',
        description: `Alliant design contemporain, fonctionnalit√© intelligente et grand confort, le canap√© VENTU se distingue par ses lignes √©pur√©es et son espace couchage √©largi. Son tissu Dunbar 25 disponible en gris moderne ou en beige chaleureux apporte une touche d'√©l√©gance √† tout int√©rieur.

Caract√©ristiques principales :
Convertible avec couchage agrandi : m√©canisme de d√©pliage automatique DL pour une transformation rapide en lit.
Espace de couchage g√©n√©reux : 150 x 210 cm ‚Äì id√©al pour un usage quotidien ou ponctuel.
Rangement int√©gr√© : grand conteneur pour literie, discret et pratique.
Assise confortable : gr√¢ce au ressort ondul√© et √† la mousse haute densit√©.

Dimensions :
Largeur : 263 cm
Profondeur : 105 cm
Hauteur : 93 cm
Hauteur d'assise : 45 cm

Finitions & Style :
Tissu : Dunbar 25
Coloris disponibles : Gris moderne, Beige doux et lumineux
Style : Moderne, √©pur√©, facile √† int√©grer dans tout type de d√©coration

Informations suppl√©mentaires :
Type : Canap√© inclinable convertible
Assemblage : Facile √† monter soi-m√™me
Destination : Salon, pi√®ce √† vivre, studio`,
        price: 899,
        compare_at_price: 1299,
        category: 'Canap√©',
        vendor: 'Decora Home',
        image_url: 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
        stock: 50,
        option1_name: 'Couleur',
        option1_value: 'Gris moderne'
      },
      {
        id: 'decora-canape-ventu-beige',
        handle: 'canape-ventu-convertible',
        name: 'Canap√© VENTU convertible',
        description: `Alliant design contemporain, fonctionnalit√© intelligente et grand confort, le canap√© VENTU se distingue par ses lignes √©pur√©es et son espace couchage √©largi. Son tissu Dunbar 25 disponible en gris moderne ou en beige chaleureux apporte une touche d'√©l√©gance √† tout int√©rieur.

Caract√©ristiques principales :
Convertible avec couchage agrandi : m√©canisme de d√©pliage automatique DL pour une transformation rapide en lit.
Espace de couchage g√©n√©reux : 150 x 210 cm ‚Äì id√©al pour un usage quotidien ou ponctuel.
Rangement int√©gr√© : grand conteneur pour literie, discret et pratique.
Assise confortable : gr√¢ce au ressort ondul√© et √† la mousse haute densit√©.

Dimensions :
Largeur : 263 cm
Profondeur : 105 cm
Hauteur : 93 cm
Hauteur d'assise : 45 cm

Finitions & Style :
Tissu : Dunbar 25
Coloris disponibles : Gris moderne, Beige doux et lumineux
Style : Moderne, √©pur√©, facile √† int√©grer dans tout type de d√©coration

Informations suppl√©mentaires :
Type : Canap√© inclinable convertible
Assemblage : Facile √† monter soi-m√™me
Destination : Salon, pi√®ce √† vivre, studio`,
        price: 899,
        compare_at_price: 1299,
        category: 'Canap√©',
        vendor: 'Decora Home',
        image_url: 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
        stock: 45,
        option1_name: 'Couleur',
        option1_value: 'Beige doux'
      }
    ];
  };

  const enrichProductsWithAdvancedAI = async (rawProducts: any[]): Promise<SmartProduct[]> => {
    const enrichedProducts: SmartProduct[] = [];
    
    // Grouper par handle pour g√©rer les variations (250 produits variables au lieu de 650 single)
    const groupedByHandle = new Map<string, any[]>();
    
    rawProducts.forEach(product => {
      const handle = product.handle || generateHandle(product.name || product.title);
      if (!groupedByHandle.has(handle)) {
        groupedByHandle.set(handle, []);
      }
      groupedByHandle.get(handle)!.push(product);
    });
    
    console.log(`üîÑ Groupement: ${groupedByHandle.size} produits variables (au lieu de ${rawProducts.length} single)`);
    
    // Enrichir chaque groupe de produits
    for (const [handle, productGroup] of groupedByHandle.entries()) {
      try {
        const mainProduct = productGroup[0];
        const aiAttributes = await extractAIAttributes(mainProduct);
        
        // Cr√©er les variations
        const variations = productGroup.map(product => ({
          id: product.id || `var-${Date.now()}-${Math.random()}`,
          title: product.option1_value || 'Default',
          price: parseFloat(product.price) || parseFloat(product.variant_price) || 0,
          stock: parseInt(product.stock) || parseInt(product.variant_inventory_qty) || 0,
          options: product.option1_name ? [{
            name: product.option1_name,
            value: product.option1_value
          }] : []
        }));
        
        const smartProduct: SmartProduct = {
          id: mainProduct.id || `smart-${Date.now()}-${Math.random()}`,
          name: mainProduct.name || mainProduct.title || 'Produit sans nom',
          description: cleanDescription(mainProduct.description || mainProduct.body_html || ''),
          price: Math.min(...variations.map(v => v.price)),
          category: aiAttributes.category,
          vendor: mainProduct.vendor || 'Decora Home',
          image_url: mainProduct.image_url || mainProduct.image_src || 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
          stock: variations.reduce((sum, v) => sum + v.stock, 0),
          ai_attributes: aiAttributes,
          variations: variations,
          seo_optimized: generateSEOOptimized(mainProduct, aiAttributes),
          enriched_at: new Date().toISOString()
        };
        
        enrichedProducts.push(smartProduct);
        
      } catch (error) {
        console.error('‚ùå Erreur enrichissement produit:', error);
      }
    }
    
    return enrichedProducts;
  };

  const extractAIAttributes = async (product: any) => {
    const text = `${product.name || product.title || ''} ${product.description || product.body_html || ''}`;
    
    // Extraction avanc√©e des dimensions depuis la description
    const dimensions = extractDetailedDimensions(text);
    
    return {
      colors: extractColors(text, product),
      materials: extractMaterials(text),
      dimensions: dimensions,
      styles: extractStyles(text),
      features: extractFeatures(text),
      room: extractRooms(text),
      confidence_score: calculateConfidence(text, dimensions)
    };
  };

  const extractDetailedDimensions = (text: string) => {
    const dimensions: any = {};
    
    // Patterns sp√©cifiques pour chaque dimension
    const patterns = [
      { key: 'largeur', regex: /largeur\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'profondeur', regex: /profondeur\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'hauteur', regex: /hauteur\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'hauteur_assise', regex: /hauteur\s+d[\'']?assise\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'diametre', regex: /(?:diam√®tre|√∏)\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      // Couchage sp√©cifique
      { key: 'couchage', regex: /(?:espace\s+de\s+)?couchage\s*:?\s*(\d+(?:[.,]\d+)?)\s*[x√ó]\s*(\d+(?:[.,]\d+)?)\s*cm/gi }
    ];
    
    patterns.forEach(({ key, regex }) => {
      const matches = [...text.matchAll(regex)];
      matches.forEach(match => {
        if (key === 'couchage') {
          dimensions.couchage_largeur = parseFloat(match[1].replace(',', '.'));
          dimensions.couchage_longueur = parseFloat(match[2].replace(',', '.'));
        } else {
          dimensions[key] = parseFloat(match[1].replace(',', '.'));
        }
      });
    });
    
    return dimensions;
  };

  const extractColors = (text: string, product: any): string[] => {
    const colors = new Set<string>();
    
    // Couleurs depuis les options de variation
    if (product.option1_name === 'Couleur' && product.option1_value) {
      colors.add(product.option1_value);
    }
    
    // Couleurs sp√©cifiques dans le texte
    const colorPatterns = [
      'gris moderne', 'beige doux', 'beige chaleureux', 'beige lumineux',
      'blanc cass√©', 'noir mat', 'bleu marine', 'vert olive',
      'blanc', 'noir', 'gris', 'beige', 'marron', 'bleu', 'vert', 'rouge'
    ];
    
    colorPatterns.forEach(color => {
      if (text.toLowerCase().includes(color)) {
        colors.add(color);
      }
    });
    
    return Array.from(colors);
  };

  const extractMaterials = (text: string): string[] => {
    const materials = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const materialPatterns = [
      'tissu dunbar 25', 'tissu dunbar', 'velours c√¥tel√©', 'chenille',
      'travertin naturel', 'm√©tal noir', 'ressort ondul√©', 'mousse haute densit√©',
      'bois massif', 'ch√™ne', 'h√™tre', 'pin', 'teck', 'acier', 'verre', 'cuir'
    ];
    
    materialPatterns.forEach(material => {
      if (lowerText.includes(material)) {
        materials.add(material);
      }
    });
    
    return Array.from(materials);
  };

  const extractStyles = (text: string): string[] => {
    const styles = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const stylePatterns = [
      'design contemporain', 'lignes √©pur√©es', 'moderne', 'contemporain',
      'scandinave', 'industriel', 'vintage', 'rustique', 'classique',
      'minimaliste', 'boh√®me', '√©pur√©'
    ];
    
    stylePatterns.forEach(style => {
      if (lowerText.includes(style)) {
        styles.add(style);
      }
    });
    
    return Array.from(styles);
  };

  const extractFeatures = (text: string): string[] => {
    const features = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const featurePatterns = [
      'convertible', 'couchage agrandi', 'm√©canisme automatique', 'd√©pliage automatique',
      'rangement int√©gr√©', 'conteneur', 'coffre', 'ressort ondul√©',
      'mousse haute densit√©', 'facile √† monter', 'inclinable', 'r√©versible'
    ];
    
    featurePatterns.forEach(feature => {
      if (lowerText.includes(feature)) {
        features.add(feature);
      }
    });
    
    return Array.from(features);
  };

  const extractRooms = (text: string): string[] => {
    const rooms = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const roomPatterns = [
      'salon', 'pi√®ce √† vivre', 'studio', 'chambre', 'cuisine',
      'bureau', 'salle √† manger', 'entr√©e', 'terrasse'
    ];
    
    roomPatterns.forEach(room => {
      if (lowerText.includes(room)) {
        rooms.add(room);
      }
    });
    
    return Array.from(rooms);
  };

  const generateSEOOptimized = (product: any, aiAttributes: any) => {
    const name = product.name || product.title || '';
    const primaryColor = aiAttributes.colors[0] || '';
    const primaryMaterial = aiAttributes.materials[0] || '';
    
    return {
      title: `${name} ${primaryColor} ${primaryMaterial} - Decora Home`.substring(0, 70),
      description: `${name} ${primaryMaterial ? 'en ' + primaryMaterial : ''} ${primaryColor}. ${aiAttributes.features.join(', ')}. Livraison gratuite.`.substring(0, 155),
      tags: [
        aiAttributes.category?.toLowerCase(),
        ...aiAttributes.colors.slice(0, 2),
        ...aiAttributes.materials.slice(0, 2),
        ...aiAttributes.styles.slice(0, 1)
      ].filter(Boolean)
    };
  };

  const calculateConfidence = (text: string, dimensions: any): number => {
    let confidence = 30;
    
    if (text.toLowerCase().includes('dimensions')) confidence += 20;
    if (Object.keys(dimensions).length > 2) confidence += 25;
    if (text.toLowerCase().includes('caract√©ristiques')) confidence += 15;
    if (text.toLowerCase().includes('coloris disponibles')) confidence += 10;
    
    return Math.min(confidence, 100);
  };

  //