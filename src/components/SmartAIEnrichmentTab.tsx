import React, { useState, useEffect } from 'react';
import { 
  Brain, Sparkles, Zap, RefreshCw, Download, Upload, 
  BarChart3, CheckCircle, AlertCircle, Loader2, Eye,
  Package, Tag, DollarSign, Image, Settings, Search,
  Filter, ChevronDown, ChevronUp, ExternalLink, Target
} from 'lucide-react';
import { useNotifications } from './NotificationSystem';

interface SmartProduct {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  vendor: string;
  image_url: string;
  stock: number;
  ai_attributes: {
    colors: string[];
    materials: string[];
    dimensions: {
      largeur?: number;
      profondeur?: number;
      hauteur?: number;
      hauteur_assise?: number;
      couchage_largeur?: number;
      couchage_longueur?: number;
      diametre?: number;
    };
    styles: string[];
    features: string[];
    room: string[];
    confidence_score: number;
    tags: string[];
  };
  variations: Array<{
    id: string;
    title: string;
    price: number;
    stock: number;
    options: { name: string; value: string }[];
  }>;
  seo_optimized: {
    title: string;
    description: string;
    tags: string[];
  };
  enriched_at: string;
  ai_vision_summary?: string;
  subcategory?: string;
  productType?: string;
  compare_at_price?: number;
}

export const SmartAIEnrichmentTab: React.FC = () => {
  const [products, setProducts] = useState<SmartProduct[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isEnriching, setIsEnriching] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<SmartProduct | null>(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
  const [selectedProducts, setSelectedProducts] = useState<string[]>([]);
  const [isAnalyzingVision, setIsAnalyzingVision] = useState(false);
  const [visionAnalysisResults, setVisionAnalysisResults] = useState<{[key: string]: string}>({});
  const [isSyncing, setIsSyncing] = useState(false);
  const { showSuccess, showError, showInfo } = useNotifications();

  // Fonction pour analyser une image avec Vision IA
  const analyzeImageWithVisionAI = async (imageUrl: string, productName: string, category: string): Promise<string> => {
    try {
      // Simuler l'analyse Vision IA avec OpenAI
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // G√©n√©rer une synth√®se r√©aliste bas√©e sur la cat√©gorie
      const visionSyntheses = {
        'Canap√©': [
          "Canap√© d'angle en velours c√¥tel√© avec finition soign√©e. Design contemporain aux lignes √©pur√©es. M√©canisme convertible visible. Qualit√© premium avec coutures pr√©cises.",
          "Canap√© moderne en tissu textur√© beige. Structure robuste avec pieds m√©talliques. Coussins d'assise g√©n√©reux. Finition professionnelle visible.",
          "Canap√© convertible avec rangement int√©gr√© apparent. Velours c√¥tel√© de qualit√© sup√©rieure. Design arrondi tendance. M√©canisme de transformation visible."
        ],
        'Table': [
          "Table ronde en travertin naturel avec veines caract√©ristiques. Pieds en m√©tal noir mat au design √©pur√©. Finition polie brillante. Qualit√© artisanale visible.",
          "Table au plateau en pierre naturelle avec texture authentique. Structure m√©tallique moderne. Proportions harmonieuses. Mat√©riaux nobles assembl√©s avec pr√©cision.",
          "Table design avec plateau min√©ral √©l√©gant. Pieds g√©om√©triques en m√©tal. Surface lisse et uniforme. Esth√©tique contemporaine raffin√©e."
        ],
        'Chaise': [
          "Chaise en tissu chenille avec texture visible. Pieds en m√©tal noir au design baguette. Assise rembourr√©e confortable. Finition industrielle chic.",
          "Chaise moderne avec rev√™tement textile de qualit√©. Structure m√©tallique solide. Proportions ergonomiques. Design contemporain √©pur√©.",
          "Chaise au design minimaliste avec tissu textur√©. Pieds fins en m√©tal. Assise g√©n√©reuse. Esth√©tique scandinave moderne."
        ]
      };
      
      const categoryAnalyses = visionSyntheses[category as keyof typeof visionSyntheses] || visionSyntheses['Canap√©'];
      return categoryAnalyses[Math.floor(Math.random() * categoryAnalyses.length)];
      
    } catch (error) {
      console.error('‚ùå Erreur Vision IA:', error);
      return "Produit de qualit√© avec finition soign√©e. Design contemporain aux lignes √©pur√©es. Mat√©riaux nobles et assemblage pr√©cis.";
    }
  };

  // Fonction am√©lior√©e pour g√©n√©rer des tags intelligents
  const generateIntelligentTags = (title: string, description: string, category: string): string[] => {
    const text = `${title} ${description}`.toLowerCase();
    const tags = new Set<string>();
    
    // Mots vides √† exclure
    const stopWords = [
      'le', 'la', 'les', 'un', 'une', 'des', 'du', 'de', 'et', 'ou', 'avec', 'sans', 'pour', 'par', 'sur', 'dans', '√†', 'au', 'aux',
      'ce', 'cette', 'ces', 'son', 'sa', 'ses', 'notre', 'nos', 'votre', 'vos', 'leur', 'leurs',
      'qui', 'que', 'dont', 'o√π', 'quand', 'comment', 'pourquoi',
      'tr√®s', 'plus', 'moins', 'bien', 'mal', 'tout', 'tous', 'toute', 'toutes',
      'est', 'sont', '√©tait', '√©taient', 'sera', 'seront', 'avoir', '√™tre',
      'cm', 'mm', 'm', 'kg', 'g', 'eur', 'euro', 'euros'
    ];
    
    // Extraire les mots significatifs
    const words = text.split(/\s+/)
      .filter(word => word.length > 2)
      .filter(word => !stopWords.includes(word))
      .filter(word => !/^\d+$/.test(word));
    
    // Mots-cl√©s prioritaires mobilier
    const furnitureKeywords = [
      'ventu', 'alyana', 'aurea', 'inaya', 'convertible', 'angle', 'places', 'velours', 'tissu', 'cuir',
      'table', 'ronde', 'rectangulaire', 'basse', 'manger', 'travertin', 'marbre', 'bois', 'm√©tal',
      'chaise', 'fauteuil', 'bureau', 'ergonomique', 'pivotant',
      'lit', 'matelas', 'sommier', 't√™te', 'rangement',
      'moderne', 'contemporain', 'scandinave', 'industriel', 'vintage', 'classique',
      'salon', 'chambre', 'cuisine', 'bureau', 'salle',
      'blanc', 'noir', 'gris', 'beige', 'marron', 'bleu', 'vert', 'rouge',
      'design', '√©l√©gant', 'confort', 'qualit√©', 'premium', 'luxe',
      'dunbar', 'chenille', 'c√¥tel√©', '√©pur√©', 'arrondi', 'tendance'
    ];
    
    // Compter la fr√©quence et prioriser
    const wordCount = new Map<string, number>();
    words.forEach(word => {
      wordCount.set(word, (wordCount.get(word) || 0) + 1);
    });
    
    // S√©parer mots prioritaires et r√©guliers
    const priorityTags: string[] = [];
    const regularTags: string[] = [];
    
    Array.from(wordCount.entries())
      .sort((a, b) => b[1] - a[1])
      .forEach(([word, count]) => {
        if (furnitureKeywords.includes(word)) {
          priorityTags.push(word);
        } else if (count > 1 || word.length > 4) {
          regularTags.push(word);
        }
      });
    
    const finalTags = [...priorityTags.slice(0, 4), ...regularTags.slice(0, 2)]
      .slice(0, 6)
      .filter((tag, index, array) => array.indexOf(tag) === index);
    
    return finalTags.length > 0 ? finalTags : ['mobilier', 'design', 'int√©rieur'];
  };

  useEffect(() => {
    loadSmartProducts();
  }, []);

  const loadSmartProducts = async () => {
    try {
      setIsLoading(true);
      console.log('üß† Chargement Smart AI Products...');
      
      // Charger depuis toutes les sources de produits
      const allProducts = await loadAllProductSources();
      console.log('üì¶ Produits bruts charg√©s:', allProducts.length);
      
      // Enrichir automatiquement avec IA avanc√©e
      const smartProducts = await enrichProductsWithAdvancedAI(allProducts);
      console.log('ü§ñ Produits enrichis par IA:', smartProducts.length);
      
      setProducts(smartProducts);
      
    } catch (error) {
      console.error('‚ùå Erreur chargement Smart AI:', error);
      showError('Erreur de chargement', 'Impossible de charger les produits Smart AI.');
    } finally {
      setIsLoading(false);
    }
  };

  const loadAllProductSources = async (): Promise<any[]> => {
    let allProducts: any[] = [];
    
    // Sources multiples
    const sources = [
      'catalog_products',
      'shopify_products',
      'imported_products',
      'vendor_products',
      'seller_products'
    ];
    
    for (const source of sources) {
      try {
        const savedData = localStorage.getItem(source);
        if (savedData) {
          const parsed = JSON.parse(savedData);
          if (Array.isArray(parsed)) {
            console.log(`üì¶ ${source}: ${parsed.length} produits`);
            allProducts = [...allProducts, ...parsed];
          }
        }
      } catch (error) {
        console.error(`‚ùå Erreur parsing ${source}:`, error);
      }
    }
    
    // Ajouter produits Decora avec variations compl√®tes
    const decoraProducts = getDecoraCatalogWithFullVariations();
    allProducts = [...allProducts, ...decoraProducts];
    
    // Supprimer doublons
    const uniqueProducts = allProducts.filter((product, index, self) => 
      index === self.findIndex(p => p.id === product.id)
    );
    
    console.log(`üìä Produits uniques: ${uniqueProducts.length}`);
    return uniqueProducts;
  };

  const getDecoraCatalogWithFullVariations = () => {
    return [
      // Canap√© VENTU avec description compl√®te
      {
        id: 'decora-canape-ventu-gris',
        handle: 'canape-ventu-convertible',
        name: 'Canap√© VENTU convertible',
        description: `Alliant design contemporain, fonctionnalit√© intelligente et grand confort, le canap√© VENTU se distingue par ses lignes √©pur√©es et son espace couchage √©largi. Son tissu Dunbar 25 disponible en gris moderne ou en beige chaleureux apporte une touche d'√©l√©gance √† tout int√©rieur.

Caract√©ristiques principales :
Convertible avec couchage agrandi : m√©canisme de d√©pliage automatique DL pour une transformation rapide en lit.
Espace de couchage g√©n√©reux : 150 x 210 cm ‚Äì id√©al pour un usage quotidien ou ponctuel.
Rangement int√©gr√© : grand conteneur pour literie, discret et pratique.
Assise confortable : gr√¢ce au ressort ondul√© et √† la mousse haute densit√©.

Dimensions :
Largeur : 263 cm
Profondeur : 105 cm
Hauteur : 93 cm
Hauteur d'assise : 45 cm

Finitions & Style :
Tissu : Dunbar 25
Coloris disponibles : Gris moderne, Beige doux et lumineux
Style : Moderne, √©pur√©, facile √† int√©grer dans tout type de d√©coration

Informations suppl√©mentaires :
Type : Canap√© inclinable convertible
Assemblage : Facile √† monter soi-m√™me
Destination : Salon, pi√®ce √† vivre, studio`,
        price: 899,
        compare_at_price: 1299,
        category: 'Canap√©',
        vendor: 'Decora Home',
        image_url: 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
        stock: 50,
        option1_name: 'Couleur',
        option1_value: 'Gris moderne'
      },
      {
        id: 'decora-canape-ventu-beige',
        handle: 'canape-ventu-convertible',
        name: 'Canap√© VENTU convertible',
        description: `Alliant design contemporain, fonctionnalit√© intelligente et grand confort, le canap√© VENTU se distingue par ses lignes √©pur√©es et son espace couchage √©largi. Son tissu Dunbar 25 disponible en gris moderne ou en beige chaleureux apporte une touche d'√©l√©gance √† tout int√©rieur.

Caract√©ristiques principales :
Convertible avec couchage agrandi : m√©canisme de d√©pliage automatique DL pour une transformation rapide en lit.
Espace de couchage g√©n√©reux : 150 x 210 cm ‚Äì id√©al pour un usage quotidien ou ponctuel.
Rangement int√©gr√© : grand conteneur pour literie, discret et pratique.
Assise confortable : gr√¢ce au ressort ondul√© et √† la mousse haute densit√©.

Dimensions :
Largeur : 263 cm
Profondeur : 105 cm
Hauteur : 93 cm
Hauteur d'assise : 45 cm

Finitions & Style :
Tissu : Dunbar 25
Coloris disponibles : Gris moderne, Beige doux et lumineux
Style : Moderne, √©pur√©, facile √† int√©grer dans tout type de d√©coration

Informations suppl√©mentaires :
Type : Canap√© inclinable convertible
Assemblage : Facile √† monter soi-m√™me
Destination : Salon, pi√®ce √† vivre, studio`,
        price: 899,
        compare_at_price: 1299,
        category: 'Canap√©',
        vendor: 'Decora Home',
        image_url: 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
        stock: 45,
        option1_name: 'Couleur',
        option1_value: 'Beige doux'
      }
    ];
  };

  const enrichProductsWithAdvancedAI = async (rawProducts: any[]): Promise<SmartProduct[]> => {
    const enrichedProducts: SmartProduct[] = [];
    
    // Grouper par handle pour g√©rer les variations (250 produits variables au lieu de 650 single)
    const groupedByHandle = new Map<string, any[]>();
    
    rawProducts.forEach(product => {
      const handle = product.handle || generateHandle(product.name || product.title);
      if (!groupedByHandle.has(handle)) {
        groupedByHandle.set(handle, []);
      }
      groupedByHandle.get(handle)!.push(product);
    });
    
    console.log(`üîÑ Groupement: ${groupedByHandle.size} produits variables (au lieu de ${rawProducts.length} single)`);
    
    // Enrichir chaque groupe de produits
    for (const [handle, productGroup] of groupedByHandle.entries()) {
      try {
        const mainProduct = productGroup[0];
        const aiAttributes = await extractAIAttributes(mainProduct);
        
        // Cr√©er les variations
        const variations = productGroup.map(product => ({
          id: product.id || `var-${Date.now()}-${Math.random()}`,
          title: product.option1_value || 'Default',
          price: parseFloat(product.price) || parseFloat(product.variant_price) || 0,
          stock: parseInt(product.stock) || parseInt(product.variant_inventory_qty) || 0,
          options: product.option1_name ? [{
            name: product.option1_name,
            value: product.option1_value
          }] : []
        }));
        
        const smartProduct: SmartProduct = {
          id: mainProduct.id || `smart-${Date.now()}-${Math.random()}`,
          name: mainProduct.name || mainProduct.title || 'Produit sans nom',
          description: cleanDescription(mainProduct.description || mainProduct.body_html || ''),
          price: Math.min(...variations.map(v => v.price)) || 0,
          compare_at_price: mainProduct.compare_at_price || mainProduct.variant_compare_at_price,
          category: aiAttributes.category,
          vendor: mainProduct.vendor || 'Decora Home',
          image_url: mainProduct.image_url || mainProduct.image_src || 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
          stock: variations.reduce((sum, v) => sum + v.stock, 0),
          ai_attributes: aiAttributes,
          variations: variations,
          seo_optimized: generateSEOOptimized(mainProduct, aiAttributes),
          enriched_at: new Date().toISOString(),
          ai_vision_summary: generateVisionAISummary(mainProduct),
          subcategory: detectSubcategory(mainProduct.name || mainProduct.title || '')
        };
        
        enrichedProducts.push(smartProduct);
        
      } catch (error) {
        console.error('‚ùå Erreur enrichissement produit:', error);
      }
    }
    
    return enrichedProducts;
  };

  const generateVisionAISummary = (product: any): string => {
    const productName = (product.name || product.title || '').toLowerCase();
    const description = (product.description || '').toLowerCase();
    const category = detectCategory(productName);
    
    // Synth√®ses Vision IA sp√©cialis√©es par cat√©gorie
    if (category === 'Canap√©') {
      if (productName.includes('ventu')) {
        return "Canap√© d'angle en velours c√¥tel√© avec finition soign√©e. Design contemporain aux lignes √©pur√©es et arrondies. M√©canisme convertible visible avec couchage g√©n√©reux. Qualit√© premium avec coutures pr√©cises et pieds en bois naturel.";
      } else if (productName.includes('alyana')) {
        return "Canap√© d'angle convertible en velours c√¥tel√© beige avec finition premium. Design moderne aux formes arrondies et accueillantes. Coffre de rangement int√©gr√© visible. Qualit√© exceptionnelle avec coutures renforc√©es.";
      }
      return "Canap√© moderne en tissu de qualit√© avec structure robuste. Design contemporain aux lignes √©pur√©es. Finition soign√©e avec d√©tails de couture visibles. Confort optimal avec assise g√©n√©reuse.";
    }
    
    if (category === 'Table') {
      if (productName.includes('aurea')) {
        return "Table ronde en travertin naturel avec veines caract√©ristiques bien visibles. Plateau min√©ral aux nuances beiges et cr√®me. Pieds en m√©tal noir mat avec finition anti-rayures. Design √©pur√© et √©l√©gant.";
      }
      return "Table au design contemporain avec plateau de qualit√©. Finition soign√©e et mat√©riaux nobles. Structure stable avec pieds √©l√©gants. Proportions harmonieuses et lignes √©pur√©es.";
    }
    
    if (category === 'Chaise') {
      if (productName.includes('inaya')) {
        return "Chaise en tissu chenille textur√© avec pieds m√©tal noir mat. Design baguette √©pur√© et moderne. Structure solide avec finition industrielle chic. Assise confortable avec rembourrage optimal.";
      }
      return "Chaise au design contemporain avec mat√©riaux de qualit√©. Finition soign√©e et structure stable. Confort d'assise optimal avec d√©tails de finition visibles.";
    }
    
    return "Produit de qualit√© avec finition soign√©e. Design contemporain aux lignes √©pur√©es. Mat√©riaux nobles et assemblage pr√©cis. Fonctionnalit√©s bien int√©gr√©es.";
  };

  const detectCategory = (productName: string): string => {
    const name = productName.toLowerCase();
    if (name.includes('canap√©') || name.includes('sofa')) return 'Canap√©';
    if (name.includes('table')) return 'Table';
    if (name.includes('chaise') || name.includes('fauteuil')) return 'Chaise';
    if (name.includes('lit')) return 'Lit';
    if (name.includes('armoire') || name.includes('commode')) return 'Rangement';
    if (name.includes('meuble tv')) return 'Meuble TV';
    return 'Mobilier';
  };

  const detectSubcategory = (productName: string): string => {
    const name = productName.toLowerCase();
    if (name.includes('angle') && name.includes('convertible')) return 'Canap√© d\'angle convertible';
    if (name.includes('angle')) return 'Canap√© d\'angle';
    if (name.includes('convertible')) return 'Canap√© convertible';
    if (name.includes('basse')) return 'Table basse';
    if (name.includes('manger') || name.includes('repas')) return 'Table √† manger';
    if (name.includes('ronde')) return 'Table ronde';
    if (name.includes('bureau')) return 'Chaise de bureau';
    if (name.includes('bar')) return 'Tabouret de bar';
    return '';
  };

  const extractAIAttributes = async (product: any) => {
    const text = `${product.name || product.title || ''} ${product.description || product.body_html || ''}`;
    
    // Extraction avanc√©e des dimensions depuis la description
    const dimensions = extractDetailedDimensions(text);
    
    // G√©n√©rer tags intelligents depuis titre et description
    const intelligentTags = generateIntelligentTags(
      product.name || product.title || '',
      product.description || product.body_html || '',
      product.category || 'Mobilier'
    );
    
    return {
      colors: extractColors(text, product),
      materials: extractMaterials(text),
      dimensions: dimensions,
      styles: extractStyles(text),
      features: extractFeatures(text),
      room: extractRooms(text),
      confidence_score: calculateConfidence(text, dimensions),
      tags: intelligentTags,
      category: detectCategory(product.name || product.title || '')
    };
  };

  const extractDetailedDimensions = (text: string) => {
    const dimensions: any = {};
    
    // Patterns sp√©cifiques pour chaque dimension
    const patterns = [
      { key: 'largeur', regex: /largeur\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'profondeur', regex: /profondeur\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'hauteur', regex: /hauteur\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'hauteur_assise', regex: /hauteur\s+d[\'']?assise\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      { key: 'diametre', regex: /(?:diam√®tre|√∏)\s*:?\s*(\d+(?:[.,]\d+)?)\s*cm/gi },
      // Couchage sp√©cifique
      { key: 'couchage', regex: /(?:espace\s+de\s+)?couchage\s*:?\s*(\d+(?:[.,]\d+)?)\s*[x√ó]\s*(\d+(?:[.,]\d+)?)\s*cm/gi }
    ];
    
    patterns.forEach(({ key, regex }) => {
      const matches = [...text.matchAll(regex)];
      matches.forEach(match => {
        if (key === 'couchage') {
          dimensions.couchage_largeur = parseFloat(match[1].replace(',', '.'));
          dimensions.couchage_longueur = parseFloat(match[2].replace(',', '.'));
        } else {
          dimensions[key] = parseFloat(match[1].replace(',', '.'));
        }
      });
    });
    
    return dimensions;
  };

  const extractColors = (text: string, product: any): string[] => {
    const colors = new Set<string>();
    
    // Couleurs depuis les options de variation
    if (product.option1_name === 'Couleur' && product.option1_value) {
      colors.add(product.option1_value);
    }
    
    // Couleurs sp√©cifiques dans le texte
    const colorPatterns = [
      'gris moderne', 'beige doux', 'beige chaleureux', 'beige lumineux',
      'blanc cass√©', 'noir mat', 'bleu marine', 'vert olive',
      'blanc', 'noir', 'gris', 'beige', 'marron', 'bleu', 'vert', 'rouge'
    ];
    
    colorPatterns.forEach(color => {
      if (text.toLowerCase().includes(color)) {
        colors.add(color);
      }
    });
    
    return Array.from(colors);
  };

  const extractMaterials = (text: string): string[] => {
    const materials = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const materialPatterns = [
      'tissu dunbar 25', 'tissu dunbar', 'velours c√¥tel√©', 'chenille',
      'travertin naturel', 'm√©tal noir', 'ressort ondul√©', 'mousse haute densit√©',
      'bois massif', 'ch√™ne', 'h√™tre', 'pin', 'teck', 'acier', 'verre', 'cuir'
    ];
    
    materialPatterns.forEach(material => {
      if (lowerText.includes(material)) {
        materials.add(material);
      }
    });
    
    return Array.from(materials);
  };

  const extractStyles = (text: string): string[] => {
    const styles = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const stylePatterns = [
      'design contemporain', 'lignes √©pur√©es', 'moderne', 'contemporain',
      'scandinave', 'industriel', 'vintage', 'rustique', 'classique',
      'minimaliste', 'boh√®me', '√©pur√©'
    ];
    
    stylePatterns.forEach(style => {
      if (lowerText.includes(style)) {
        styles.add(style);
      }
    });
    
    return Array.from(styles);
  };

  const extractFeatures = (text: string): string[] => {
    const features = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const featurePatterns = [
      'convertible', 'couchage agrandi', 'm√©canisme automatique', 'd√©pliage automatique',
      'rangement int√©gr√©', 'conteneur', 'coffre', 'ressort ondul√©',
      'mousse haute densit√©', 'facile √† monter', 'inclinable', 'r√©versible'
    ];
    
    featurePatterns.forEach(feature => {
      if (lowerText.includes(feature)) {
        features.add(feature);
      }
    });
    
    return Array.from(features);
  };

  const extractRooms = (text: string): string[] => {
    const rooms = new Set<string>();
    const lowerText = text.toLowerCase();
    
    const roomPatterns = [
      'salon', 'pi√®ce √† vivre', 'studio', 'chambre', 'cuisine',
      'bureau', 'salle √† manger', 'entr√©e', 'terrasse'
    ];
    
    roomPatterns.forEach(room => {
      if (lowerText.includes(room)) {
        rooms.add(room);
      }
    });
    
    return Array.from(rooms);
  };

  const generateSEOOptimized = (product: any, aiAttributes: any) => {
    const name = product.name || product.title || '';
    const primaryColor = aiAttributes.colors[0] || '';
    const primaryMaterial = aiAttributes.materials[0] || '';
    
    return {
      title: `${name} ${primaryColor} ${primaryMaterial} - Decora Home`.substring(0, 70),
      description: `${name} ${primaryMaterial ? 'en ' + primaryMaterial : ''} ${primaryColor}. ${aiAttributes.features.join(', ')}. Livraison gratuite.`.substring(0, 155),
      tags: [
        aiAttributes.category?.toLowerCase(),
        ...aiAttributes.colors.slice(0, 2),
        ...aiAttributes.materials.slice(0, 2),
        ...aiAttributes.styles.slice(0, 1)
      ].filter(Boolean)
    };
  };

  const calculateConfidence = (text: string, dimensions: any): number => {
    let confidence = 40; // Base plus √©lev√©e
    
    if (text.toLowerCase().includes('dimensions')) confidence += 15;
    if (Object.keys(dimensions).length > 2) confidence += 20;
    if (text.toLowerCase().includes('caract√©ristiques')) confidence += 10;
    if (text.toLowerCase().includes('coloris disponibles')) confidence += 10;
    if (text.toLowerCase().includes('mat√©riau')) confidence += 10;
    if (text.toLowerCase().includes('style')) confidence += 5;
    
    return Math.min(confidence, 100);
  };

  const cleanDescription = (description: string): string => {
    return description
      .replace(/<[^>]*>/g, '') // Supprimer HTML
      .replace(/\s+/g, ' ')    // Normaliser espaces
      .trim();
  };

  const handleSyncCatalog = async () => {
    setIsSyncing(true);
    showInfo('Synchronisation d√©marr√©e', 'Synchronisation du catalogue avec les derni√®res donn√©es...');
    
    try {
      // Simuler la synchronisation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Recharger les produits enrichis
      await loadSmartProducts();
      
      showSuccess(
        'Catalogue synchronis√©',
        'Le catalogue a √©t√© synchronis√© avec succ√®s !',
        [
          {
            label: 'Voir les produits',
            action: () => setViewMode('grid'),
            variant: 'primary'
          }
        ]
      );
      
    } catch (error) {
      console.error('‚ùå Erreur synchronisation:', error);
      showError('Erreur de synchronisation', 'Impossible de synchroniser le catalogue.');
    } finally {
      setIsSyncing(false);
    }
  };

  // Fonction pour calculer la remise
  const calculateDiscount = (price: number, compareAtPrice?: number): number => {
    if (!compareAtPrice || compareAtPrice <= price) return 0;
    return Math.round(((compareAtPrice - price) / compareAtPrice) * 100);
  };

  // Fonction pour enrichir un produit avec Vision IA
  const enrichProductWithVisionAI = async (product: SmartProduct): Promise<SmartProduct> => {
    try {
      console.log('üëÅÔ∏è Analyse Vision IA pour:', product.name.substring(0, 30));
      
      // Analyser l'image avec Vision IA
      const visionSummary = await analyzeImageWithVisionAI(
        product.image_url, 
        product.name, 
        product.category
      );
      
      // G√©n√©rer tags intelligents am√©lior√©s
      const improvedTags = generateIntelligentTags(
        product.name,
        product.description,
        product.category
      );
      
      // Am√©liorer les attributs IA
      const enhancedAttributes = {
        ...product.ai_attributes,
        tags: improvedTags,
        confidence_score: 100 // Confiance maximale apr√®s enrichissement complet
      };
      
      return {
        ...product,
        ai_attributes: enhancedAttributes,
        ai_vision_summary: visionSummary,
        enriched_at: new Date().toISOString()
      };
      
    } catch (error) {
      console.error('‚ùå Erreur enrichissement Vision IA:', error);
      return product;
    }
  };

  const handleEnrichProduct = async (productId: string) => {
    try {
      setIsAnalyzingVision(true);
      
      const productIndex = products.findIndex(p => p.id === productId);
      if (productIndex === -1) return;
      
      const product = products[productIndex];
      
      // Enrichir avec Vision IA
      const enrichedProduct = await enrichProductWithVisionAI(product);
      
      setProducts(prev => prev.map(p => 
        p.id === productId ? enrichedProduct : p
      ));
      
      showSuccess(
        'Produit enrichi avec Vision IA', 
        `${product.name.substring(0, 30)}... enrichi avec analyse visuelle !`
      );
      
    } catch (error) {
      console.error('‚ùå Erreur enrichissement produit:', error);
      showError('Erreur enrichissement', 'Impossible d\'enrichir le produit.');
    } finally {
      setIsAnalyzingVision(false);
    }
  };

  const handleEnrichAll = async () => {
    try {
      setIsAnalyzingVision(true);
      showInfo('Enrichissement Vision IA', 'Analyse automatique des images et extraction des attributs...');
      
      const enrichedProducts = [];
      
      // Enrichir chaque produit avec Vision IA
      for (const [index, product] of products.entries()) {
        console.log(`üîÑ Enrichissement ${index + 1}/${products.length}: ${product.name.substring(0, 30)}...`);
        
        const enrichedProduct = await enrichProductWithVisionAI(product);
        enrichedProducts.push(enrichedProduct);
        
        // Pause entre les produits pour √©viter la surcharge
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      
      setProducts(enrichedProducts);
      
      showSuccess(
        'Enrichissement Vision IA termin√©', 
        `${products.length} produits enrichis avec analyse visuelle automatique !`,
        [
          {
            label: 'Voir les r√©sultats',
            action: () => setSelectedProduct(enrichedProducts[0]),
            variant: 'primary'
          }
        ]
      );
      
    } catch (error) {
      console.error('‚ùå Erreur enrichissement global:', error);
      showError('Erreur enrichissement', 'Impossible d\'enrichir tous les produits.');
    } finally {
      setIsAnalyzingVision(false);
    }
  };

  const generateHandle = (name: string): string => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  };

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const categories = Array.from(new Set(products.map(p => p.category))).filter(Boolean);

  // Modal de d√©tail produit
  const ProductDetailModal = () => (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-2xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-8">
          {/* Header */}
          <div className="flex items-start justify-between mb-8">
            <div className="flex-1">
              <h2 className="text-3xl font-bold text-white mb-2">{selectedProduct?.name}</h2>
              <p className="text-gray-300 mb-4">{selectedProduct?.category} ‚Ä¢ {selectedProduct?.vendor}</p>
              <div className="flex items-center gap-4">
                <span className="text-3xl font-bold text-green-400">{Math.round(selectedProduct?.price || 0)}‚Ç¨</span>
                {selectedProduct?.compare_at_price && selectedProduct.compare_at_price > selectedProduct.price && (
                  <>
                    <span className="text-gray-400 line-through text-xl">{Math.round(selectedProduct.compare_at_price)}‚Ç¨</span>
                    <span className="bg-red-500/20 text-red-300 px-3 py-1 rounded-full text-sm font-bold">
                      -{calculateDiscount(selectedProduct.price, selectedProduct.compare_at_price)}% OFF
                    </span>
                  </>
                )}
              </div>
            </div>
            <div className="w-80