const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

interface VisionAnalysisRequest {
  image_url: string;
  image_base64?: string;
  analysis_type?: 'interior_design' | 'product_identification' | 'style_analysis' | 'complete_product_analysis';
  context?: {
    room_type?: string;
    budget?: string;
    style_preference?: string;
  };
  product_context?: {
    title?: string;
    description?: string;
    price?: number;
    category?: string;
    current_attributes?: {
      color?: string;
      material?: string;
      style?: string;
      dimensions?: string;
    };
  };
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const { image_url, image_base64, analysis_type = 'interior_design', context, product_context }: VisionAnalysisRequest = await req.json();

    console.log('üëÅÔ∏è Analyse GPT Vision demand√©e:', analysis_type);

    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (!openaiApiKey) {
      console.log('‚ùå Cl√© API OpenAI manquante');
      return new Response(
        JSON.stringify({ 
          error: "Cl√© API OpenAI non configur√©e pour Vision",
          fallback_analysis: generateFallbackAnalysis(analysis_type)
        }),
        {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Construire le prompt selon le type d'analyse
    const analysisPrompt = buildAnalysisPrompt(analysis_type, context, product_context);

    // Pr√©parer l'image pour GPT Vision
    const imageContent = image_base64 ? 
      { type: "image_url", image_url: { url: `data:image/jpeg;base64,${image_base64}` } } :
      { type: "image_url", image_url: { url: image_url } };

    console.log('üîÑ Envoi √† GPT Vision...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o', // GPT-4 avec Vision
        messages: [
          {
            role: 'system',
            content: analysisPrompt.system
          },
          {
            role: 'user',
            content: [
              {
                type: "text",
                text: analysisPrompt.user
              },
              imageContent
            ]
          }
        ],
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur GPT Vision:', response.status, errorText);
      
      return new Response(
        JSON.stringify({ 
          error: "Erreur GPT Vision API",
          details: errorText,
          fallback_analysis: generateFallbackAnalysis(analysis_type)
        }),
        {
          status: response.status,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const data = await response.json();
    const analysis = data.choices[0]?.message?.content || generateFallbackAnalysis(analysis_type);

    // Si c'est une analyse compl√®te de produit, extraire aussi les attributs structur√©s
    let extractedAttributes = null;
    if (analysis_type === 'complete_product_analysis' && product_context) {
      extractedAttributes = await extractCompleteProductAttributes(
        product_context.title || '',
        product_context.description || '',
        analysis,
        product_context.price || 0
      );
    }

    console.log('‚úÖ Analyse GPT Vision r√©ussie:', analysis.substring(0, 100) + '...');

    return new Response(
      JSON.stringify({ 
        visual_analysis: analysis,
        extracted_attributes: extractedAttributes,
        recommendations: extractedAttributes ? generateImprovementRecommendations(extractedAttributes, product_context) : null,
        analysis_type: analysis_type,
        confidence: 'high',
        processed_at: new Date().toISOString()
      }),
      {
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );

  } catch (error) {
    console.error('‚ùå Erreur serveur GPT Vision:', error);
    
    return new Response(
      JSON.stringify({ 
        error: "Erreur serveur lors de l'analyse visuelle",
        details: error.message,
        fallback_analysis: generateFallbackAnalysis('interior_design')
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});

function buildAnalysisPrompt(analysisType: string, context?: any, productContext?: any) {
  const baseSystem = `Tu es OmnIA, d√©corateur d'int√©rieur expert et vendeur chez Decora Home. 

CATALOGUE DECORA HOME :
- Canap√©s ALYANA convertibles velours c√¥tel√© (799‚Ç¨) - Beige, Taupe, Bleu
- Tables AUREA travertin naturel (499-549‚Ç¨) - √ò100cm, √ò120cm  
- Chaises INAYA chenille + m√©tal noir (99‚Ç¨) - Gris clair, Moka

TON STYLE DE R√âPONSE :
- Commence TOUJOURS par "J'aime bien cette photo !" ou variante
- Analyse le style existant avec expertise
- Propose 1-2 produits Decora Home pertinents avec prix
- Donne un conseil d√©co bonus
- Termine par une question engageante
- Ton chaleureux de d√©corateur passionn√©
- Maximum 100 mots

EXEMPLE DE R√âPONSE :
"J'aime bien cette photo ! Votre salon est moderne avec de belles proportions. 

üí° Mes suggestions Decora Home :
‚Ä¢ Table AUREA √ò100cm (499‚Ç¨) - Le travertin apporterait √©l√©gance
‚Ä¢ Chaises INAYA (99‚Ç¨) - Design parfait avec votre style

üé® Conseil d√©co : Ajoutez des coussins color√©s pour r√©chauffer !

Que souhaitez-vous modifier dans cet espace ?"`;

  switch (analysisType) {
    case 'interior_design':
      return {
        system: baseSystem,
        user: `Analyse cette photo d'int√©rieur comme un d√©corateur expert. 
        
Identifie :
- Le style d√©co actuel
- Les couleurs dominantes  
- L'am√©nagement et circulation
- Les opportunit√©s d'am√©lioration
- Les meubles manquants ou √† remplacer

Propose des produits Decora Home adapt√©s avec arguments d√©co pr√©cis.`
      };
      
    case 'product_identification':
      return {
        system: baseSystem,
        user: `Identifie les meubles visibles dans cette photo.
        
Analyse :
- Types de meubles pr√©sents
- Styles et mat√©riaux
- √âtat et qualit√© apparente
- Harmonie g√©n√©rale
- Suggestions de remplacement ou compl√©ment

Recommande des alternatives Decora Home si pertinent.`
      };
      
    case 'style_analysis':
      return {
        system: baseSystem,
        user: `Analyse le style d√©coratif de cet espace.
        
D√©termine :
- Style principal (moderne, scandinave, industriel...)
- Palette de couleurs
- Mat√©riaux dominants
- Ambiance g√©n√©rale
- Coh√©rence stylistique

Conseille des ajouts Decora Home pour renforcer le style.`
      };
      
    case 'complete_product_analysis':
      return {
        system: `Tu es un expert en analyse de produits mobilier. Tu combines analyse visuelle et extraction textuelle pour optimiser les fiches produits.

PRODUIT √Ä ANALYSER:
Titre: ${productContext?.title || 'Non sp√©cifi√©'}
Description: ${productContext?.description || 'Non sp√©cifi√©'}
Prix: ${productContext?.price || 0}‚Ç¨
Cat√©gorie: ${productContext?.category || 'Non sp√©cifi√©'}

ATTRIBUTS ACTUELS:
Couleur: ${productContext?.current_attributes?.color || 'Non d√©fini'}
Mat√©riau: ${productContext?.current_attributes?.material || 'Non d√©fini'}
Style: ${productContext?.current_attributes?.style || 'Non d√©fini'}
Dimensions: ${productContext?.current_attributes?.dimensions || 'Non d√©fini'}

MISSION: Analyse COMPL√àTE image + texte pour optimiser la fiche produit.`,
        user: `Analyse cette image de produit mobilier ET exploite COMPL√àTEMENT le titre + description.

ANALYSE REQUISE:
1. **Analyse visuelle de l'image** :
   - Couleurs dominantes r√©elles
   - Mat√©riaux visibles (bois, m√©tal, tissu, etc.)
   - Style design apparent
   - Forme et proportions
   - Qualit√© de finition visible
   - D√©tails techniques visibles

2. **Extraction maximale du titre + description** :
   - Dimensions exactes mentionn√©es
   - Mat√©riaux sp√©cifi√©s
   - Couleurs nomm√©es
   - Fonctionnalit√©s (convertible, rangement, etc.)
   - Marque et collection
   - Garantie et entretien

3. **Recommandations d'optimisation** :
   - Attributs manquants √† ajouter
   - Corrections si image ‚â† texte
   - Am√©liorations SEO possibles
   - Tags suppl√©mentaires pertinents

Format de r√©ponse structur√© et d√©taill√© pour optimiser la fiche produit.`
      };
      
    default:
      return {
        system: baseSystem,
        user: `Analyse cette photo d'int√©rieur et donne tes conseils de d√©corateur expert.`
      };
  }
}

async function extractCompleteProductAttributes(title: string, description: string, visualAnalysis: string, price: number) {
  const deepseekApiKey = Deno.env.get('DEEPSEEK_API_KEY');
  
  if (!deepseekApiKey) {
    return extractBasicAttributesFromText(title, description, price);
  }

  try {
    const prompt = `Exploite COMPL√àTEMENT ces donn√©es pour extraire tous les attributs possibles :

TITRE: ${title}
DESCRIPTION: ${description}
PRIX: ${price}‚Ç¨
ANALYSE VISUELLE: ${visualAnalysis}

Extrait TOUS les attributs au format JSON strict :
{
  "title_optimized": "Titre optimis√© avec tous les d√©tails",
  "subcategory_precise": "Sous-cat√©gorie tr√®s pr√©cise (ex: Chaise de salle √† manger moderne en tissu effet lin beige avec pieds m√©tal noir mat)",
  "color_primary": "couleur principale",
  "color_secondary": "couleur secondaire",
  "material_primary": "mat√©riau principal",
  "material_secondary": "mat√©riau secondaire",
  "fabric_type": "type de tissu sp√©cifique",
  "wood_type": "type de bois sp√©cifique",
  "metal_type": "type de m√©tal sp√©cifique",
  "style_primary": "style principal",
  "style_secondary": "style secondaire",
  "dimensions_extracted": "dimensions exactes extraites",
  "weight": "poids si mentionn√©",
  "capacity": "capacit√© (places, tiroirs, etc.)",
  "features": ["fonctionnalit√©1", "fonctionnalit√©2"],
  "room_primary": "pi√®ce principale",
  "room_secondary": "pi√®ce secondaire",
  "brand": "marque/fabricant",
  "collection": "collection/gamme",
  "warranty": "garantie si mentionn√©e",
  "care_instructions": ["instruction1", "instruction2"],
  "assembly_required": true/false,
  "origin_country": "pays d'origine",
  "certifications": ["certification1", "certification2"],
  "price_range": "entr√©e de gamme|standard|premium",
  "target_audience": "particuliers|professionnels|mixte",
  "usage_context": "quotidien|occasionnel|intensif",
  "tags_seo": ["tag1", "tag2", "tag3", "tag4", "tag5"],
  "seo_title_optimized": "Titre SEO optimis√© ‚â§70 caract√®res",
  "seo_description_optimized": "Meta description ‚â§155 caract√®res",
  "confidence_extraction": 95
}

R√àGLES:
- Exploite CHAQUE mot du titre et description
- Combine avec l'analyse visuelle
- Sois tr√®s pr√©cis sur les sous-cat√©gories
- Extrait TOUS les d√©tails techniques
- Optimise pour le SEO

R√âPONSE JSON UNIQUEMENT:`;

    const response = await fetch('https://api.deepseek.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${deepseekApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en extraction d\'attributs mobilier. Tu exploites COMPL√àTEMENT titre + description + analyse visuelle. R√©ponds uniquement en JSON valide.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.1,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      const content = data.choices[0]?.message?.content?.trim();
      
      if (content) {
        try {
          const extracted = JSON.parse(content);
          console.log('‚úÖ Extraction compl√®te r√©ussie:', Object.keys(extracted).length, 'attributs');
          return extracted;
        } catch (parseError) {
          console.log('‚ö†Ô∏è JSON invalide, fallback extraction basique');
        }
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erreur DeepSeek, fallback extraction basique');
  }

  return extractBasicAttributesFromText(title, description, price);
}

function extractBasicAttributesFromText(title: string, description: string, price: number) {
  const text = `${title} ${description}`.toLowerCase();
  
  // Extraction basique mais compl√®te
  const colors = ['blanc', 'noir', 'gris', 'beige', 'marron', 'bleu', 'vert', 'rouge', 'jaune', 'orange', 'rose', 'violet', 'naturel', 'ch√™ne', 'noyer', 'taupe'];
  const materials = ['bois', 'm√©tal', 'verre', 'tissu', 'cuir', 'velours', 'travertin', 'marbre', 'plastique', 'rotin', 'chenille'];
  const styles = ['moderne', 'contemporain', 'scandinave', 'industriel', 'vintage', 'rustique', 'classique', 'minimaliste', 'boh√®me'];
  const rooms = ['salon', 'chambre', 'cuisine', 'bureau', 'salle √† manger', 'entr√©e', 'terrasse'];
  
  const detectedColors = colors.filter(color => text.includes(color));
  const detectedMaterials = materials.filter(material => text.includes(material));
  const detectedStyles = styles.filter(style => text.includes(style));
  const detectedRooms = rooms.filter(room => text.includes(room));
  
  // Extraction dimensions
  const dimensionMatch = text.match(/(\d+)\s*[x√ó]\s*(\d+)(?:\s*[x√ó]\s*(\d+))?\s*cm/);
  const dimensions = dimensionMatch ? dimensionMatch[0] : '';
  
  // Extraction fonctionnalit√©s
  const features = [];
  if (text.includes('convertible')) features.push('convertible');
  if (text.includes('rangement') || text.includes('coffre')) features.push('rangement');
  if (text.includes('r√©versible')) features.push('r√©versible');
  if (text.includes('pliable')) features.push('pliable');
  if (text.includes('extensible')) features.push('extensible');
  
  return {
    title_optimized: title,
    subcategory_precise: `${detectedMaterials[0] || 'Mobilier'} ${detectedColors[0] || ''} ${detectedStyles[0] || ''}`.trim(),
    color_primary: detectedColors[0] || '',
    color_secondary: detectedColors[1] || '',
    material_primary: detectedMaterials[0] || '',
    material_secondary: detectedMaterials[1] || '',
    style_primary: detectedStyles[0] || '',
    dimensions_extracted: dimensions,
    features: features,
    room_primary: detectedRooms[0] || '',
    price_range: price < 200 ? 'entr√©e de gamme' : price < 800 ? 'standard' : 'premium',
    tags_seo: [...detectedColors, ...detectedMaterials, ...detectedStyles].filter(Boolean).slice(0, 5),
    confidence_extraction: 75
  };
}

function generateImprovementRecommendations(extractedAttributes: any, productContext: any) {
  const recommendations = [];
  
  // V√©rifier les attributs manquants
  if (!extractedAttributes.dimensions_extracted && !productContext?.current_attributes?.dimensions) {
    recommendations.push('Ajouter les dimensions exactes pour am√©liorer le r√©f√©rencement');
  }
  
  if (!extractedAttributes.color_primary && !productContext?.current_attributes?.color) {
    recommendations.push('Sp√©cifier la couleur principale pour faciliter la recherche');
  }
  
  if (!extractedAttributes.material_primary && !productContext?.current_attributes?.material) {
    recommendations.push('Pr√©ciser le mat√©riau principal pour les filtres de recherche');
  }
  
  if (!extractedAttributes.style_primary && !productContext?.current_attributes?.style) {
    recommendations.push('D√©finir le style d√©coratif pour cibler les clients');
  }
  
  if (extractedAttributes.features?.length === 0) {
    recommendations.push('Identifier les fonctionnalit√©s sp√©ciales (convertible, rangement, etc.)');
  }
  
  if (!extractedAttributes.seo_title_optimized) {
    recommendations.push('Optimiser le titre SEO avec mots-cl√©s pertinents');
  }
  
  if (!extractedAttributes.seo_description_optimized) {
    recommendations.push('Cr√©er une meta description attractive pour Google');
  }
  
  if (extractedAttributes.tags_seo?.length < 3) {
    recommendations.push('Ajouter plus de tags SEO pour am√©liorer la visibilit√©');
  }
  
  return recommendations.length > 0 ? recommendations : ['Fiche produit compl√®te et optimis√©e !'];
}

function generateFallbackAnalysis(analysisType: string): string {
  switch (analysisType) {
    case 'interior_design':
      return `J'aime bien cette photo ! Votre espace a un style moderne tr√®s r√©ussi.

üé® L'am√©nagement est bien pens√© et les proportions harmonieuses.

üí° Mes suggestions Decora Home :
‚Ä¢ **Table AUREA √ò100cm** (499‚Ç¨) - Le travertin naturel apporterait une touche min√©rale √©l√©gante
‚Ä¢ **Chaises INAYA** (99‚Ç¨) - Design contemporain parfait avec votre style

Que souhaitez-vous modifier dans cet espace ?`;
      
    case 'product_identification':
      return `J'aime bien cette photo ! Je vois un espace bien am√©nag√© avec du potentiel.

üõãÔ∏è Mobilier moderne avec lignes √©pur√©es, palette neutre bien ma√Ætris√©e.

üí° Suggestions d'am√©lioration :
‚Ä¢ **Canap√© ALYANA** (799‚Ç¨) - Convertible velours c√¥tel√© pour optimiser l'espace

Quels meubles souhaitez-vous remplacer ?`;
      
    default:
      return `J'aime bien cette photo ! Votre int√©rieur a beaucoup de charme.

üé® Style moderne et √©pur√© avec une base neutre bien √©quilibr√©e.

üí° Mes recommandations :
‚Ä¢ **Collection AUREA** - Travertin naturel pour apporter caract√®re

Quelle ambiance souhaitez-vous cr√©er ?`;
  }
}