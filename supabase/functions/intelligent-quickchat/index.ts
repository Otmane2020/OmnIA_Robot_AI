const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

import { createClient } from 'npm:@supabase/supabase-js@2';

interface QuickChatRequest {
  message: string;
  conversation_history?: Array<{
    role: 'user' | 'assistant';
    content: string;
  }>;
  photo_context?: string; // base64 image
}

interface MessageAnalysis {
  intent: 'product_search' | 'chat' | 'faq';
  attributes: {
    category?: string;
    color?: string;
    material?: string;
    style?: string;
    room?: string;
    price_max?: number;
    dimensions?: string;
  };
  response: string;
  confidence: number;
}

interface EnrichedProduct {
  id: string;
  handle: string;
  title: string;
  description: string;
  price: number;
  compare_at_price?: number;
  category: string;
  subcategory: string;
  color: string;
  material: string;
  fabric: string;
  style: string;
  dimensions: string;
  room: string;
  image_url: string;
  product_url: string;
  stock_qty: number;
  tags: string[];
  seo_title: string;
  seo_description: string;
  brand: string;
  confidence_score: number;
  variants?: ProductVariant[];
}

interface ProductVariant {
  id: string;
  title: string;
  color: string;
  price: number;
  compare_at_price?: number;
  image_url: string;
  stock_qty: number;
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  console.log('üöÄ [intelligent-quickchat] Function called');

  try {
    const { message, conversation_history = [], photo_context }: QuickChatRequest = await req.json();
    
    console.log('ü§ñ [quickchat] Message re√ßu:', message?.substring(0, 50) + '...');

    if (!message || typeof message !== 'string') {
      throw new Error('Message invalide');
    }

    // Initialize Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå [quickchat] Configuration Supabase manquante');
      throw new Error('Configuration serveur manquante');
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);

    // üß† √âTAPE 1: Analyser l'intention avec DeepSeek
    const messageAnalysis = await analyzeMessage(message, conversation_history);
    console.log('üéØ [quickchat] Intention:', messageAnalysis.intent, messageAnalysis.attributes);

    // üì∏ √âTAPE 2: Analyser la photo si fournie avec OpenAI Vision
    let photoAnalysis = null;
    if (photo_context) {
      photoAnalysis = await analyzePhotoWithVision(photo_context);
      console.log('üëÅÔ∏è [quickchat] Analyse photo:', photoAnalysis?.style_detected || 'Aucune');
    }

    // üîç √âTAPE 3: Traitement selon l'intention
    let finalResponse;
    
    if (messageAnalysis.intent === 'product_search') {
      // Rechercher dans le catalogue enrichi Smart AI
      const enrichedProducts = await searchProductsEnriched(supabase, messageAnalysis.attributes, photoAnalysis);
      console.log('üì¶ [quickchat] Produits enrichis trouv√©s:', enrichedProducts.length);

      // Cr√©er des variantes pour les produits variables
      const productsWithVariants = await createProductVariants(enrichedProducts);
      console.log('üé® [quickchat] Produits avec variantes:', productsWithVariants.length);

      finalResponse = {
        message: messageAnalysis.response,
        products: productsWithVariants.slice(0, 6),
        intent: messageAnalysis.intent,
        photo_analysis: photoAnalysis
      };
    } else if (messageAnalysis.intent === 'faq') {
      // Rechercher dans la FAQ
      const faqResponse = await searchFAQ(message);
      finalResponse = {
        message: faqResponse || messageAnalysis.response,
        products: [],
        intent: messageAnalysis.intent
      };
    } else {
      // Chat g√©n√©ral - pas de produits
      finalResponse = {
        message: messageAnalysis.response,
        products: [],
        intent: messageAnalysis.intent
      };
    }

    return new Response(JSON.stringify(finalResponse), { 
      headers: { 'Content-Type': 'application/json', ...corsHeaders } 
    });

  } catch (error) {
    console.error('‚ùå [quickchat] Erreur compl√®te:', error);
    
    return new Response(JSON.stringify({
      message: `D√©sol√©, erreur technique: ${error instanceof Error ? error.message : 'Erreur inconnue'}. Pouvez-vous reformuler ?`,
      products: [],
      fallback: true,
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json', ...corsHeaders } 
    });
  }
});

async function analyzeMessage(message: string, history: any[]): Promise<MessageAnalysis> {
  const deepseekApiKey = Deno.env.get('DEEPSEEK_API_KEY');
  
  if (!deepseekApiKey) {
    return analyzeMessageBasic(message);
  }

  try {
    const historyContext = history.length > 0 ? 
      `CONTEXTE CONVERSATION:\n${history.slice(-2).map(h => `${h.role}: ${h.content}`).join('\n')}\n\n` : '';

    const prompt = `${historyContext}Analyse ce message et d√©termine l'intention au format JSON strict :

MESSAGE: "${message}"

Extrait au format JSON strict :
{
  "intent": "product_search|chat|faq",
  "attributes": {
    "category": "canap√©|table|chaise|lit|rangement|decoration",
    "color": "beige|gris|blanc|noir|bleu|vert|rouge|taupe|naturel",
    "material": "tissu|bois|m√©tal|travertin|velours|cuir|verre",
    "style": "moderne|scandinave|contemporain|industriel|vintage",
    "room": "salon|chambre|cuisine|bureau",
    "price_max": 500,
    "dimensions": "dimensions mentionn√©es"
  },
  "response": "R√©ponse appropri√©e selon l'intention",
  "confidence": 85
}

R√àGLES D'INTENTION:
- **product_search**: Mention de meubles (canap√©, table, chaise), couleurs, mat√©riaux, styles, "je cherche", "je veux"
- **faq**: Questions sur livraison, garantie, retour, paiement, magasin, horaires, "comment", "o√π", "quand"
- **chat**: Salutations, questions g√©n√©rales, compliments, "bonjour", "merci", "qui √™tes-vous"

R√âPONSES SELON INTENTION:
- product_search: "Parfait ! Voici nos [cat√©gorie] [attributs] üëá" (court, max 15 mots)
- chat: R√©ponse conversationnelle chaleureuse (50-80 mots max)
- faq: R√©ponse informative pratique (40-60 mots)

EXEMPLES:
- "Je cherche un canap√© beige" ‚Üí intent: product_search, response: "Parfait ! Voici nos canap√©s beiges üëá"
- "Bonjour, comment allez-vous ?" ‚Üí intent: chat, response: "Bonjour ! Je suis OmnIA ü§ñ votre conseiller mobilier chez Decora Home. Ravi de vous rencontrer ! Comment puis-je vous aider pour votre projet d√©co ?"
- "La livraison est gratuite ?" ‚Üí intent: faq, response: "Oui ! Livraison gratuite en France m√©tropolitaine sous 7-10 jours üöö"

R√âPONSE JSON UNIQUEMENT:`;

    const response = await fetch('https://api.deepseek.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${deepseekApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en analyse d\'intention pour assistant mobilier. R√©ponds uniquement en JSON valide.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 400,
        temperature: 0.1,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      const content = data.choices[0]?.message?.content?.trim();
      
      if (content) {
        try {
          const parsed = JSON.parse(content);
          console.log('‚úÖ [quickchat] Intention DeepSeek extraite:', parsed.intent);
          return {
            intent: parsed.intent,
            attributes: parsed.attributes || {},
            response: parsed.response || '',
            confidence: parsed.confidence || 50
          };
        } catch (parseError) {
          console.log('‚ö†Ô∏è [quickchat] JSON invalide, fallback basique');
        }
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è [quickchat] Erreur DeepSeek, fallback basique');
  }

  return analyzeMessageBasic(message);
}

function analyzeMessageBasic(message: string): MessageAnalysis {
  const lowerMessage = message.toLowerCase();
  
  // D√©tection FAQ
  const faqKeywords = [
    'livraison', 'delivery', 'gratuite', 'd√©lai', 'transport',
    'garantie', 'warranty', 'retour', '√©change', 'remboursement',
    'paiement', 'payment', 'carte', 'paypal', 'virement',
    'magasin', 'showroom', 'adresse', 'horaires', 'ouvert',
    'comment', 'o√π', 'quand', 'combien de temps'
  ];
  
  if (faqKeywords.some(keyword => lowerMessage.includes(keyword))) {
    return {
      intent: 'faq',
      attributes: {},
      response: generateFAQResponse(lowerMessage),
      confidence: 80
    };
  }
  
  // D√©tection salutations et chat g√©n√©ral
  const chatKeywords = [
    'bonjour', 'salut', 'hello', 'bonsoir', 'coucou', 'hey',
    'merci', 'thank', 'au revoir', 'bye',
    'qui √™tes-vous', 'qui es-tu', 'comment allez-vous',
    '√ßa va', 'comment √ßa va', 'quoi de neuf'
  ];
  
  if (chatKeywords.some(keyword => lowerMessage.includes(keyword))) {
    return {
      intent: 'chat',
      attributes: {},
      response: generateChatResponse(lowerMessage),
      confidence: 90
    };
  }
  
  // D√©tection recherche produit
  const productKeywords = [
    'canap√©', 'sofa', 'table', 'chaise', 'fauteuil', 'lit', 'matelas',
    'armoire', 'commode', 'meuble', 'mobilier',
    'je cherche', 'je veux', 'j\'aimerais', 'montrez-moi',
    'avez-vous', 'proposez-vous', 'vendez-vous'
  ];
  
  if (productKeywords.some(keyword => lowerMessage.includes(keyword))) {
    const attributes = extractAttributesBasic(lowerMessage);
    return {
      intent: 'product_search',
      attributes,
      response: generateProductSearchResponse(attributes),
      confidence: 75
    };
  }
  
  // Par d√©faut = chat
  return {
    intent: 'chat',
    attributes: {},
    response: "Avec plaisir ! Comment puis-je vous aider pour votre projet d√©co ? üòä",
    confidence: 50
  };
}

function extractAttributesBasic(message: string) {
  const attributes: any = {};
  
  // Cat√©gories
  if (message.includes('canap√©') || message.includes('sofa')) attributes.category = 'canap√©';
  else if (message.includes('table')) attributes.category = 'table';
  else if (message.includes('chaise') || message.includes('fauteuil')) attributes.category = 'chaise';
  else if (message.includes('lit')) attributes.category = 'lit';
  
  // Couleurs
  const colors = ['beige', 'gris', 'blanc', 'noir', 'bleu', 'vert', 'rouge', 'taupe', 'naturel'];
  const foundColor = colors.find(color => message.includes(color));
  if (foundColor) attributes.color = foundColor;
  
  // Mat√©riaux
  const materials = ['tissu', 'bois', 'm√©tal', 'travertin', 'velours', 'cuir', 'verre'];
  const foundMaterial = materials.find(material => message.includes(material));
  if (foundMaterial) attributes.material = foundMaterial;
  
  // Styles
  const styles = ['moderne', 'scandinave', 'contemporain', 'industriel', 'vintage'];
  const foundStyle = styles.find(style => message.includes(style));
  if (foundStyle) attributes.style = foundStyle;
  
  // Pi√®ces
  if (message.includes('salon')) attributes.room = 'salon';
  else if (message.includes('chambre')) attributes.room = 'chambre';
  else if (message.includes('cuisine')) attributes.room = 'cuisine';
  else if (message.includes('bureau')) attributes.room = 'bureau';
  
  // Prix
  const priceMatch = message.match(/sous (\d+)/);
  if (priceMatch) attributes.price_max = parseInt(priceMatch[1]);
  
  return attributes;
}

function generateChatResponse(message: string): string {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('bonjour') || lowerMessage.includes('salut') || lowerMessage.includes('hello')) {
    return "Bonjour ! Je suis OmnIA ü§ñ votre conseiller mobilier chez Decora Home. Ravi de vous rencontrer ! Comment puis-je vous aider pour votre projet d√©co ?";
  }
  
  if (lowerMessage.includes('merci')) {
    return "Avec grand plaisir ! üòä C'est un bonheur de vous accompagner dans votre projet d√©co. Autre chose pour embellir votre int√©rieur ?";
  }
  
  if (lowerMessage.includes('qui √™tes-vous') || lowerMessage.includes('qui es-tu')) {
    return "Je suis OmnIA ü§ñ votre assistant robot sp√©cialis√© en mobilier et d√©coration chez Decora Home ! Je connais parfaitement notre catalogue et je suis l√† pour vous conseiller. Quel est votre projet ?";
  }
  
  if (lowerMessage.includes('comment allez-vous') || lowerMessage.includes('√ßa va')) {
    return "√áa va tr√®s bien, merci ! üòä Je suis en pleine forme pour vous aider √† cr√©er l'int√©rieur de vos r√™ves. Parlez-moi de votre projet d√©co !";
  }
  
  return "Avec plaisir ! Je suis l√† pour vous accompagner dans tous vos projets mobilier et d√©co. Que puis-je faire pour vous aujourd'hui ? üòä";
}

function generateFAQResponse(message: string): string {
  if (message.includes('livraison')) {
    return "Livraison gratuite en France m√©tropolitaine sous 7-10 jours ouvr√©s üöö Express 48h disponible. Montage inclus sur demande !";
  }
  
  if (message.includes('garantie')) {
    return "Tous nos meubles sont garantis 2 ans pi√®ces et main d'≈ìuvre üõ°Ô∏è Extension possible jusqu'√† 5 ans. SAV r√©actif !";
  }
  
  if (message.includes('retour') || message.includes('√©change')) {
    return "Retour gratuit sous 30 jours si non satisfait üì¶ √âchange possible selon stock. Remboursement int√©gral garanti !";
  }
  
  if (message.includes('paiement')) {
    return "Paiement s√©curis√© : CB, PayPal, virement üí≥ Facilit√©s 3x sans frais d√®s 300‚Ç¨. Paiement √† la livraison possible !";
  }
  
  if (message.includes('magasin') || message.includes('showroom')) {
    return "Showroom Paris 15√®me, ouvert Mar-Sam 10h-19h üè™ Rendez-vous conseiller gratuit. Adresse : 123 rue de Vaugirard !";
  }
  
  return "Je peux vous renseigner sur la livraison, garantie, retours, paiement ou nos showrooms üëç Que souhaitez-vous savoir ?";
}

function generateProductSearchResponse(attributes: any): string {
  const { category, color, material, style } = attributes;
  
  if (category && color) {
    return `Parfait ! Voici nos ${category}s ${color}s ${material ? `en ${material}` : ''} üëá`;
  }
  
  if (category) {
    return `Excellent choix ! Voici notre s√©lection ${category}s ${style ? style : ''} üëá`;
  }
  
  if (color || material) {
    return `Super ! Voici nos meubles ${color || ''} ${material ? `en ${material}` : ''} üëá`;
  }
  
  return "Voici ce que j'ai trouv√© pour vous üëá";
}

async function searchProductsEnriched(supabase: any, attributes: any, photoAnalysis: any) {
  try {
    console.log('üîç [quickchat] Recherche dans catalogue enrichi...');

    // Construire la requ√™te Smart AI
    let query = supabase
      .from('products_enriched')
      .select('*')
      .gt('stock_qty', 0)
      .order('confidence_score', { ascending: false });

    // Filtrage par cat√©gorie
    if (attributes.category) {
      query = query.or(`category.ilike.%${attributes.category}%,subcategory.ilike.%${attributes.category}%`);
    }

    // Filtrage enrichi par analyse photo
    if (photoAnalysis) {
      if (photoAnalysis.style_detected) {
        query = query.ilike('style', `%${photoAnalysis.style_detected}%`);
      }
      
      if (photoAnalysis.dominant_colors?.length > 0) {
        const colorConditions = photoAnalysis.dominant_colors.map(color => `color.ilike.%${color}%`).join(',');
        query = query.or(colorConditions);
      }
      
      if (photoAnalysis.materials_visible?.length > 0) {
        const materialConditions = photoAnalysis.materials_visible.map(material => 
          `material.ilike.%${material}%,fabric.ilike.%${material}%`
        ).join(',');
        query = query.or(materialConditions);
      }
      
      if (photoAnalysis.room_type) {
        query = query.ilike('room', `%${photoAnalysis.room_type}%`);
      }
    }

    // Filtrage par couleurs
    if (attributes.color) {
      query = query.ilike('color', `%${attributes.color}%`);
    }

    // Filtrage par mat√©riaux
    if (attributes.material) {
      query = query.or(`material.ilike.%${attributes.material}%,fabric.ilike.%${attributes.material}%`);
    }

    // Filtrage par styles
    if (attributes.style) {
      query = query.ilike('style', `%${attributes.style}%`);
    }

    // Filtrage par pi√®ce
    if (attributes.room) {
      query = query.ilike('room', `%${attributes.room}%`);
    }

    // Filtrage par prix
    if (attributes.price_max) {
      query = query.lte('price', attributes.price_max);
    }

    // Limiter les r√©sultats
    query = query.limit(8);

    const { data: enrichedProducts, error } = await query;

    if (error) {
      console.error('‚ùå [quickchat] Erreur DB enriched:', error);
      return [];
    }

    console.log('‚úÖ [quickchat] Produits Smart AI trouv√©s:', enrichedProducts?.length || 0);
    
    // Si aucun produit enrichi trouv√©, cr√©er des produits de d√©monstration enrichis
    if (!enrichedProducts || enrichedProducts.length === 0) {
      console.log('üîÑ [quickchat] Cr√©ation produits d√©mo enrichis...');
      return createDemoEnrichedProducts(attributes, photoAnalysis);
    }
    
    return enrichedProducts || [];

  } catch (error) {
    console.error('‚ùå [quickchat] Erreur recherche enrichie:', error);
    return createDemoEnrichedProducts(attributes, photoAnalysis);
  }
}

async function searchFAQ(message: string): Promise<string> {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('livraison')) {
    return "Livraison gratuite en France m√©tropolitaine sous 7-10 jours ouvr√©s üöö Express 48h disponible (+19‚Ç¨). Montage inclus sur demande !";
  }
  
  if (lowerMessage.includes('garantie')) {
    return "Tous nos meubles sont garantis 2 ans pi√®ces et main d'≈ìuvre üõ°Ô∏è Extension possible jusqu'√† 5 ans. SAV r√©actif et efficace !";
  }
  
  if (lowerMessage.includes('retour') || lowerMessage.includes('√©change')) {
    return "Retour gratuit sous 30 jours si non satisfait üì¶ √âchange possible selon stock disponible. Remboursement int√©gral garanti !";
  }
  
  if (lowerMessage.includes('paiement')) {
    return "Paiement 100% s√©curis√© : CB, PayPal, virement üí≥ Facilit√©s 3x sans frais d√®s 300‚Ç¨. Paiement √† la livraison possible !";
  }
  
  if (lowerMessage.includes('magasin') || lowerMessage.includes('showroom')) {
    return "Showroom Paris 15√®me, ouvert Mar-Sam 10h-19h üè™ Rendez-vous conseiller gratuit. Adresse : 123 rue de Vaugirard, m√©tro Vaugirard !";
  }
  
  return "Je peux vous renseigner sur la livraison, garantie, retours, paiement ou nos showrooms üëç Que souhaitez-vous savoir pr√©cis√©ment ?";
}

async function analyzePhotoWithVision(imageBase64: string) {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openaiApiKey) {
    console.log('‚ö†Ô∏è [quickchat] OpenAI non configur√© pour Vision');
    return null;
  }

  try {
    console.log('üëÅÔ∏è [quickchat] Analyse photo avec OpenAI Vision...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en analyse visuelle d\'int√©rieur et conseiller d√©co. Analyse cette photo d\'espace et extrait TOUTES les informations visuelles pertinentes pour recommander des produits mobilier adapt√©s.'
          },
          {
            role: 'user',
            content: [
              {
                type: "text",
                text: `Analyse COMPL√àTEMENT cette photo d'int√©rieur et extrait au format JSON :
{
  "style_detected": "moderne|contemporain|scandinave|industriel|vintage|rustique|classique|minimaliste|boh√®me",
  "dominant_colors": ["couleur1", "couleur2", "couleur3"],
  "materials_visible": ["mat√©riau1", "mat√©riau2", "mat√©riau3"],
  "room_type": "salon|chambre|cuisine|bureau",
  "furniture_present": ["meuble1", "meuble2", "meuble3"],
  "missing_elements": ["√©l√©ment1", "√©l√©ment2", "√©l√©ment3"],
  "lighting_analysis": "Description de l'√©clairage actuel",
  "space_size": "petit|moyen|grand",
  "layout_quality": "optimal|correct|√† am√©liorer",
  "color_harmony": "harmonieuse|correcte|√† revoir",
  "design_opportunities": "Description d√©taill√©e des am√©liorations possibles",
  "recommended_products": ["type de produit 1", "type de produit 2"],
  "budget_estimate": "budget|standard|premium",
  "style_consistency": "coh√©rent|partiellement coh√©rent|incoh√©rent",
  "recommended_style": "Style recommand√© pour harmoniser l'ensemble"
}

ANALYSE APPROFONDIE:
- Identifie TOUS les meubles visibles et leur √©tat
- √âvalue la coh√©rence stylistique globale
- D√©tecte les opportunit√©s d'am√©lioration sp√©cifiques
- Recommande des types de produits pr√©cis
- Estime le budget n√©cessaire pour les am√©liorations

R√âPONSE JSON UNIQUEMENT:`
              },
              {
                type: "image_url",
                image_url: { url: `data:image/jpeg;base64,${imageBase64}` }
              }
            ]
          }
        ],
        max_tokens: 600,
        temperature: 0.1,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      const content = data.choices[0]?.message?.content?.trim();
      
      if (content) {
        try {
          const analysis = JSON.parse(content);
          console.log('‚úÖ [quickchat] Analyse Vision r√©ussie:', {
            style: analysis.style_detected,
            room: analysis.room_type,
            colors: analysis.dominant_colors?.length || 0,
            opportunities: analysis.design_opportunities?.substring(0, 50) + '...'
          });
          return analysis;
        } catch (parseError) {
          console.log('‚ö†Ô∏è [quickchat] JSON Vision invalide');
        }
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è [quickchat] Erreur OpenAI Vision:', error);
  }

  return null;
}

async function createProductVariants(products: EnrichedProduct[]) {
  const productsWithVariants = [];

  for (const product of products) {
    try {
      // Cr√©er des variantes bas√©es sur les attributs enrichis
      const variants = await generateProductVariants(product);
      
      productsWithVariants.push({
        ...product,
        variants: variants
      });

    } catch (error) {
      console.error('‚ùå [quickchat] Erreur cr√©ation variantes:', error);
      // Ajouter le produit sans variantes
      productsWithVariants.push(product);
    }
  }

  return productsWithVariants;
}

async function generateProductVariants(product: EnrichedProduct): Promise<ProductVariant[]> {
  // G√©n√©rer des variantes bas√©es sur TOUS les attributs enrichis disponibles
  const baseTitle = product.title;
  const basePrice = product.price;
  const comparePrice = product.compare_at_price;
  
  // Exploiter les attributs Smart AI pour cr√©er des variantes intelligentes
  const productColors = product.color ? [product.color] : [];
  const productMaterials = product.material ? [product.material] : [];
  const productDimensions = product.dimensions ? [product.dimensions] : [];
  
  // Chaises AVINA avec variantes de couleur
  if (baseTitle.toLowerCase().includes('avina') || baseTitle.toLowerCase().includes('chaise')) {
    // Utiliser les couleurs d√©tect√©es par Smart AI ou fallback
    const availableColors = productColors.length > 0 ? 
      [...productColors, 'Beige', 'Gris', 'Anthracite'].slice(0, 3) : 
      ['Beige', 'Gris', 'Anthracite'];
    const stockPerVariant = Math.floor(product.stock_qty / availableColors.length) || 10;
    
    return availableColors.map((color, index) => ({
      id: `${product.id}-${color.toLowerCase()}`,
      title: `Chaise AVINA - ${color} ${product.material ? `en ${product.material}` : ''}`,
      color: color,
      price: basePrice,
      compare_at_price: comparePrice,
      image_url: getVariantImageUrl(product.image_url, color),
      stock_qty: stockPerVariant,
      material: product.material || 'Tissu effet lin',
      style: product.style || 'Moderne',
      dimensions: product.dimensions || '45x52x82cm'
    }));
  }

  // Canap√©s ALYANA avec variantes de couleur
  if (baseTitle.toLowerCase().includes('alyana') || baseTitle.toLowerCase().includes('canap√©')) {
    const availableColors = productColors.length > 0 ? 
      [...productColors, 'Beige', 'Taupe', 'Bleu'].slice(0, 3) : 
      ['Beige', 'Taupe', 'Bleu'];
    const stockPerVariant = Math.floor(product.stock_qty / availableColors.length) || 15;
    
    return availableColors.map((color, index) => ({
      id: `${product.id}-${color.toLowerCase()}`,
      title: `Canap√© ALYANA - ${color} ${product.material ? `en ${product.material}` : 'velours c√¥tel√©'}`,
      color: color,
      price: basePrice,
      compare_at_price: comparePrice,
      image_url: getVariantImageUrl(product.image_url, color),
      stock_qty: stockPerVariant,
      material: product.material || 'Velours c√¥tel√©',
      style: product.style || 'Convertible',
      dimensions: product.dimensions || '263x105x93cm'
    }));
  }

  // Tables AUREA avec variantes de taille
  if (baseTitle.toLowerCase().includes('aurea') || baseTitle.toLowerCase().includes('table')) {
    // Utiliser les dimensions d√©tect√©es par Smart AI
    const detectedSizes = product.dimensions ? 
      [{ size: product.dimensions, price: basePrice, title: product.dimensions }] :
      [
        { size: '√ò100cm', price: basePrice, title: '√ò100cm' },
        { size: '√ò120cm', price: basePrice + 50, title: '√ò120cm' }
      ];
      
    const stockPerVariant = Math.floor(product.stock_qty / detectedSizes.length) || 20;
    
    return detectedSizes.map((variant, index) => ({
      id: `${product.id}-${variant.size.replace(/[^a-z0-9]/gi, '')}`,
      title: `Table AUREA ${variant.title} - ${product.material || 'Travertin naturel'}`,
      color: product.color || 'Naturel',
      price: variant.price,
      compare_at_price: comparePrice ? comparePrice + (variant.price - basePrice) : undefined,
      image_url: product.image_url,
      stock_qty: stockPerVariant,
      material: product.material || 'Travertin naturel',
      style: product.style || 'Contemporain',
      dimensions: variant.size
    }));
  }

  // Tables basses avec variantes enrichies Smart AI
  if (baseTitle.toLowerCase().includes('lina') || baseTitle.toLowerCase().includes('noa') || 
      (baseTitle.toLowerCase().includes('table') && baseTitle.toLowerCase().includes('basse'))) {
    const availableFinishes = product.material ? 
      [product.material, 'Ch√™ne clair', 'Verre tremp√©'].slice(0, 2) :
      ['Ch√™ne clair', 'Verre tremp√©'];
    const stockPerVariant = Math.floor(product.stock_qty / availableFinishes.length) || 15;
    
    return availableFinishes.map((finish, index) => ({
      id: `${product.id}-${finish.toLowerCase().replace(/\s+/g, '')}`,
      title: `${baseTitle} - ${finish}`,
      color: product.color || 'Naturel',
      price: basePrice,
      compare_at_price: comparePrice,
      image_url: getVariantImageUrl(product.image_url, finish),
      stock_qty: stockPerVariant,
      material: finish,
      style: product.style || 'Moderne',
      dimensions: product.dimensions || '90x45x40cm'
    }));
  }

  // Variante par d√©faut si aucune logique sp√©cifique
  return [{
    id: `${product.id}-default`,
    title: baseTitle,
    color: product.color || 'Naturel',
    price: basePrice,
    compare_at_price: comparePrice,
    image_url: product.image_url,
    stock_qty: product.stock_qty,
    material: product.material || '',
    style: product.style || '',
    dimensions: product.dimensions || ''
  }];
}

function getVariantImageUrl(baseImageUrl: string, color: string): string {
  // Simuler des URLs d'images diff√©rentes pour chaque couleur
  // En production, vous auriez des vraies images pour chaque variante
  const colorMappings: { [key: string]: string } = {
    'Beige': baseImageUrl,
    'Gris': baseImageUrl.replace(/beige/gi, 'gris'),
    'Anthracite': baseImageUrl.replace(/beige/gi, 'anthracite'),
    'Taupe': baseImageUrl.replace(/beige/gi, 'taupe'),
    'Bleu': baseImageUrl.replace(/beige/gi, 'bleu')
  };
  
  return colorMappings[color] || baseImageUrl;
}

function createDemoEnrichedProducts(attributes: any, photoAnalysis: any): EnrichedProduct[] {
  // Cr√©er des produits d√©mo enrichis bas√©s sur l'intention et l'analyse photo
  const demoProducts: EnrichedProduct[] = [];
  
  // Chaise AVINA enrichie
  if (!attributes.category || attributes.category === 'chaise' || 
      (photoAnalysis?.missing_elements?.includes('chaise') || photoAnalysis?.recommended_products?.includes('chaise'))) {
    demoProducts.push({
      id: 'demo-avina-enriched',
      handle: 'chaise-avina-tissu-effet-lin',
      title: 'Chaise AVINA - Tissu effet lin avec pieds m√©tal noir',
      description: 'Chaise moderne en tissu effet lin beige avec pieds en m√©tal noir mat. Design √©pur√© et contemporain, parfaite pour salon ou salle √† manger. Structure solide et confortable.',
      price: 79,
      compare_at_price: 99,
      category: 'Chaise',
      subcategory: 'Chaise de salle √† manger en tissu effet lin avec pieds m√©tal noir',
      color: 'beige',
      material: 'tissu effet lin',
      fabric: 'tissu effet lin',
      style: 'moderne',
      dimensions: '45x52x82cm',
      room: 'salon',
      image_url: 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
      product_url: '#chaise-avina',
      stock_qty: 96,
      tags: ['chaise', 'tissu effet lin', 'm√©tal noir', 'moderne', 'beige', 'salon', 'salle √† manger'],
      seo_title: 'Chaise AVINA - Tissu effet lin beige avec pieds m√©tal noir',
      seo_description: 'Chaise moderne AVINA en tissu effet lin beige avec pieds m√©tal noir. Design √©pur√© pour salon et salle √† manger.',
      brand: 'Decora Home',
      confidence_score: 92,
      variants: [
        {
          id: 'avina-beige',
          title: 'Beige',
          color: 'beige',
          price: 79,
          compare_at_price: 99,
          image_url: 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
          stock_qty: 32
        },
        {
          id: 'avina-gris',
          title: 'Gris',
          color: 'gris',
          price: 79,
          compare_at_price: 99,
          image_url: 'https://images.pexels.com/photos/586763/pexels-photo-586763.jpeg',
          stock_qty: 28
        },
        {
          id: 'avina-anthracite',
          title: 'Anthracite',
          color: 'anthracite',
          price: 79,
          compare_at_price: 99,
          image_url: 'https://images.pexels.com/photos/1866149/pexels-photo-1866149.jpeg',
          stock_qty: 36
        }
      ]
    });
  }
  
  // Table basse LINA enrichie
  if (!attributes.category || attributes.category === 'table' || 
      (photoAnalysis?.missing_elements?.includes('table') || photoAnalysis?.recommended_products?.includes('table basse'))) {
    demoProducts.push({
      id: 'demo-lina-enriched',
      handle: 'table-basse-lina-chene-clair',
      title: 'Table basse LINA - Ch√™ne clair design scandinave',
      description: 'Table basse ronde LINA en ch√™ne clair massif avec plateau √©pur√© et pieds fusel√©s. Design scandinave authentique, finition naturelle huil√©e. Parfaite pour salon moderne.',
      price: 89,
      compare_at_price: 119,
      category: 'Table',
      subcategory: 'Table basse ronde en ch√™ne clair massif avec pieds fusel√©s',
      color: 'ch√™ne clair',
      material: 'ch√™ne massif',
      fabric: '',
      style: 'scandinave',
      dimensions: '90x90x40cm',
      room: 'salon',
      image_url: 'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg',
      product_url: '#table-lina',
      stock_qty: 45,
      tags: ['table basse', 'ch√™ne clair', 'scandinave', 'ronde', 'salon', 'naturel', '√©pur√©'],
      seo_title: 'Table basse LINA ronde - Ch√™ne clair massif design scandinave',
      seo_description: 'Table basse LINA ronde en ch√™ne clair massif. Design scandinave avec pieds fusel√©s. Finition naturelle.',
      brand: 'Decora Home',
      confidence_score: 88,
      variants: [
        {
          id: 'lina-chene-clair',
          title: 'Ch√™ne clair',
          color: 'ch√™ne clair',
          price: 89,
          compare_at_price: 119,
          image_url: 'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg',
          stock_qty: 25
        },
        {
          id: 'lina-chene-fonce',
          title: 'Ch√™ne fonc√©',
          color: 'ch√™ne fonc√©',
          price: 89,
          compare_at_price: 119,
          image_url: 'https://images.pexels.com/photos/1866149/pexels-photo-1866149.jpeg',
          stock_qty: 20
        }
      ]
    });
  }
  
  // Table basse NOA enrichie
  if (!attributes.category || attributes.category === 'table' || 
      (photoAnalysis?.style_detected === 'moderne' || photoAnalysis?.materials_visible?.includes('verre'))) {
    demoProducts.push({
      id: 'demo-noa-enriched',
      handle: 'table-basse-noa-verre-metal',
      title: 'Table basse NOA - Verre tremp√© et m√©tal noir effet a√©rien',
      description: 'Table basse rectangulaire NOA en verre tremp√© transparent avec structure m√©tal noir mat. Design moderne et a√©rien, parfaite pour salon contemporain. Verre s√©curis√© 8mm.',
      price: 79,
      compare_at_price: 109,
      category: 'Table',
      subcategory: 'Table basse rectangulaire en verre tremp√© avec structure m√©tal noir',
      color: 'transparent',
      material: 'verre tremp√©',
      fabric: '',
      style: 'moderne',
      dimensions: '100x50x35cm',
      room: 'salon',
      image_url: 'https://images.pexels.com/photos/1866149/pexels-photo-1866149.jpeg',
      product_url: '#table-noa',
      stock_qty: 32,
      tags: ['table basse', 'verre tremp√©', 'm√©tal noir', 'moderne', 'rectangulaire', 'salon', 'a√©rien'],
      seo_title: 'Table basse NOA rectangulaire - Verre tremp√© et m√©tal noir moderne',
      seo_description: 'Table basse NOA en verre tremp√© transparent avec m√©tal noir. Design moderne a√©rien pour salon.',
      brand: 'Decora Home',
      confidence_score: 85,
      variants: [
        {
          id: 'noa-verre-noir',
          title: 'Verre + M√©tal noir',
          color: 'transparent',
          price: 79,
          compare_at_price: 109,
          image_url: 'https://images.pexels.com/photos/1866149/pexels-photo-1866149.jpeg',
          stock_qty: 18
        },
        {
          id: 'noa-verre-chrome',
          title: 'Verre + Chrome',
          color: 'transparent',
          price: 89,
          compare_at_price: 119,
          image_url: 'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg',
          stock_qty: 14
        }
      ]
    });
  }
  
  console.log('‚úÖ [quickchat] Produits d√©mo enrichis cr√©√©s:', demoProducts.length);
  return demoProducts;
}