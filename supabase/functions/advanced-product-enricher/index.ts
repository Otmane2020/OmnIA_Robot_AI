const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

import { createClient } from 'npm:@supabase/supabase-js@2';

interface ProductEnrichmentRequest {
  products: any[];
  retailer_id: string;
  source: 'csv' | 'shopify' | 'xml' | 'manual';
  enable_image_analysis?: boolean;
  batch_size?: number;
}

interface EnrichedAttributes {
  general_info: {
    title: string;
    brand: string;
    product_type: string;
    subcategory: string;
  };
  technical_specs: {
    dimensions?: string;
    seat_height?: string;
    bed_surface?: string;
    structure?: string;
    material: string;
    color: string;
    style: string;
    room: string;
    capacity?: string;
  };
  features: {
    convertible?: boolean;
    storage?: boolean;
    angle_reversible?: boolean;
    adjustable?: boolean;
    foldable?: boolean;
    extendable?: boolean;
  };
  seo_marketing: {
    seo_title: string;
    seo_description: string;
    ad_headline: string;
    ad_description: string;
    tags: string[];
    google_product_category: string;
  };
  ai_confidence: {
    overall: number;
    color: number;
    style: number;
    dimensions: number;
    material: number;
    category: number;
  };
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const { 
      products, 
      retailer_id, 
      source, 
      enable_image_analysis = true,
      batch_size = 10 
    }: ProductEnrichmentRequest = await req.json();
    
    console.log('ü§ñ [advanced-enricher] D√©marrage enrichissement avanc√©:', {
      products_count: products.length,
      retailer_id,
      source,
      image_analysis: enable_image_analysis
    });

    // Initialize Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Configuration Supabase manquante');
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Validate retailer exists
    const { data: retailer } = await supabase
      .from('retailers')
      .select('id, company_name')
      .eq('id', retailer_id)
      .single();

    if (!retailer) {
      throw new Error(`Retailer ${retailer_id} non trouv√©`);
    }

    console.log(`üè™ [advanced-enricher] Enrichissement pour: ${retailer.company_name}`);

    // Process products in batches
    const enrichedProducts = [];
    const batchCount = Math.ceil(products.length / batch_size);
    
    for (let i = 0; i < products.length; i += batch_size) {
      const batch = products.slice(i, i + batch_size);
      const batchNumber = Math.floor(i / batch_size) + 1;
      
      console.log(`üì¶ [advanced-enricher] Batch ${batchNumber}/${batchCount} (${batch.length} produits)`);
      
      const batchPromises = batch.map(async (product) => {
        try {
          return await enrichSingleProduct(product, retailer_id, enable_image_analysis);
        } catch (error) {
          console.error(`‚ùå [advanced-enricher] Erreur produit ${product.name}:`, error);
          return null;
        }
      });
      
      const batchResults = await Promise.all(batchPromises);
      const validResults = batchResults.filter(result => result !== null);
      enrichedProducts.push(...validResults);
      
      // Pause between batches
      if (i + batch_size < products.length) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    console.log(`‚úÖ [advanced-enricher] ${enrichedProducts.length}/${products.length} produits enrichis`);

    // Save to database with retailer isolation
    if (enrichedProducts.length > 0) {
      const { error: insertError } = await supabase
        .from('products_enriched')
        .upsert(enrichedProducts, { 
          onConflict: 'handle',
          ignoreDuplicates: false 
        });

      if (insertError) {
        console.error('‚ùå [advanced-enricher] Erreur sauvegarde DB:', insertError);
        throw insertError;
      }

      console.log('‚úÖ [advanced-enricher] Produits sauvegard√©s en DB');
    }

    // Update enrichment metadata
    await updateEnrichmentMetadata(supabase, {
      retailer_id,
      products_processed: enrichedProducts.length,
      source,
      execution_time: new Date().toISOString()
    });

    return new Response(
      JSON.stringify({
        success: true,
        message: `${enrichedProducts.length} produits enrichis avec succ√®s`,
        stats: {
          total_products: products.length,
          enriched_products: enrichedProducts.length,
          success_rate: (enrichedProducts.length / products.length) * 100,
          retailer_id,
          source,
          processed_at: new Date().toISOString()
        },
        enriched_data: enrichedProducts
      }),
      {
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );

  } catch (error) {
    console.error('‚ùå [advanced-enricher] Erreur enrichissement:', error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: 'Erreur lors de l\'enrichissement avanc√©',
        details: error.message
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );
  }
});

async function enrichSingleProduct(product: any, retailerId: string, enableImageAnalysis: boolean) {
  console.log(`üîç [advanced-enricher] Enrichissement: ${product.name?.substring(0, 30)}...`);
  
  // Step 1: Text analysis with DeepSeek
  const textAttributes = await extractTextAttributes(product);
  
  // Step 2: Image analysis with OpenAI Vision (if enabled and image available)
  let imageAttributes = null;
  if (enableImageAnalysis && product.image_url) {
    try {
      imageAttributes = await extractImageAttributes(product.image_url, textAttributes);
    } catch (error) {
      console.warn(`‚ö†Ô∏è [advanced-enricher] Image analysis failed for ${product.name}:`, error);
    }
  }
  
  // Step 3: Merge and validate attributes
  const mergedAttributes = mergeAttributes(textAttributes, imageAttributes);
  
  // Step 4: Generate enriched product
  const enrichedProduct = {
    id: product.id || `enriched-${retailerId}-${Date.now()}-${Math.random()}`,
    handle: product.handle || generateHandle(product.name || product.title),
    title: product.name || product.title || 'Produit sans nom',
    description: product.description || '',
    
    // General info
    category: mergedAttributes.general_info.product_type,
    subcategory: mergedAttributes.general_info.subcategory,
    
    // Technical specs
    color: mergedAttributes.technical_specs.color,
    material: mergedAttributes.technical_specs.material,
    fabric: extractFabricFromMaterial(mergedAttributes.technical_specs.material),
    style: mergedAttributes.technical_specs.style,
    dimensions: mergedAttributes.technical_specs.dimensions || '',
    room: mergedAttributes.technical_specs.room,
    
    // Pricing and inventory
    price: parseFloat(product.price) || 0,
    stock_qty: parseInt(product.stock) || parseInt(product.quantityAvailable) || 0,
    
    // Media
    image_url: product.image_url || 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg',
    product_url: product.product_url || '#',
    
    // SEO and marketing
    tags: mergedAttributes.seo_marketing.tags,
    seo_title: mergedAttributes.seo_marketing.seo_title,
    seo_description: mergedAttributes.seo_marketing.seo_description,
    ad_headline: mergedAttributes.seo_marketing.ad_headline,
    ad_description: mergedAttributes.seo_marketing.ad_description,
    google_product_category: mergedAttributes.seo_marketing.google_product_category,
    gtin: product.gtin || '',
    brand: mergedAttributes.general_info.brand,
    
    // AI metadata
    confidence_score: mergedAttributes.ai_confidence.overall,
    enriched_at: new Date().toISOString(),
    enrichment_source: imageAttributes ? 'text_and_image' : 'text_only',
    
    // Retailer isolation
    retailer_id: retailerId,
    
    // Timestamps
    created_at: new Date().toISOString()
  };
  
  console.log(`‚úÖ [advanced-enricher] Produit enrichi: ${enrichedProduct.title.substring(0, 30)} (${enrichedProduct.confidence_score}%)`);
  
  return enrichedProduct;
}

async function extractTextAttributes(product: any): Promise<EnrichedAttributes> {
  const deepseekApiKey = Deno.env.get('DEEPSEEK_API_KEY');
  
  if (!deepseekApiKey) {
    console.log('‚ö†Ô∏è [advanced-enricher] DeepSeek non configur√©, extraction basique');
    return extractBasicAttributes(product);
  }

  try {
    // Enhanced product text analysis with ALL available data
    const productText = `
PRODUIT: ${product.name || product.title || ''}
DESCRIPTION: ${product.description || ''}
DESCRIPTION HTML: ${product.body_html || ''}
CAT√âGORIE: ${product.category || product.productType || ''}
PRIX: ${product.price || 0}‚Ç¨
PRIX PROMOTIONNEL: ${product.compare_at_price || product.compareAtPrice || 'Aucun'}‚Ç¨
MARQUE: ${product.vendor || product.brand || ''}
TAGS: ${Array.isArray(product.tags) ? product.tags.join(', ') : product.tags || ''}
SKU: ${product.sku || product.variant_sku || ''}
STOCK: ${product.stock || product.quantityAvailable || product.stock_qty || 0}
URL: ${product.product_url || ''}
HANDLE: ${product.handle || ''}
VARIANTES: ${product.variants ? JSON.stringify(product.variants.slice(0, 3)) : 'Aucune'}
    `.trim();

    const prompt = `Tu es un expert en mobilier et design d'int√©rieur avec 20 ans d'exp√©rience. Analyse ce produit mobilier COMPL√àTEMENT et enrichis-le avec MAXIMUM de d√©tails au format JSON strict :

${productText}

ANALYSE APPROFONDIE REQUISE:
1. Examine CHAQUE mot du titre et description
2. D√©tecte TOUTES les nuances de couleurs, mat√©riaux, styles
3. Extrait dimensions pr√©cises et sp√©cifications techniques
4. Identifie TOUTES les fonctionnalit√©s et caract√©ristiques
5. Analyse le prix et d√©tecte les promotions
6. G√©n√®re SEO et marketing optimis√©s

Extrait TOUS ces attributs au format JSON exact avec MAXIMUM de pr√©cision :
{
  "general_info": {
    "title": "Titre optimis√© et enrichi du produit avec d√©tails cl√©s",
    "brand": "Marque/Fabricant exact",
    "product_type": "Canap√©|Table|Chaise|Lit|Rangement|Meuble TV|D√©coration|√âclairage",
    "subcategory": "Description TR√àS pr√©cise avec TOUS les d√©tails (ex: Canap√© d'angle convertible 4 places velours c√¥tel√© avec coffre)",
    "product_line": "Nom de la gamme/collection si d√©tectable",
    "model_name": "Nom du mod√®le sp√©cifique si mentionn√©"
  },
  "technical_specs": {
    "dimensions": "Format EXACT: L:XXXcm x l:XXXcm x H:XXXcm ou √ò:XXXcm (extraire TOUTES les dimensions mentionn√©es)",
    "seat_height": "XXcm (hauteur d'assise si canap√©/chaise)",
    "bed_surface": "XXX x XXX cm (surface couchage si convertible)",
    "structure": "Description COMPL√àTE structure/rembourrage/m√©canisme",
    "weight": "Poids en kg si mentionn√©",
    "assembly_time": "Temps de montage si mentionn√©",
    "warranty": "Dur√©e garantie si mentionn√©e",
    "material": "bois|m√©tal|verre|tissu|cuir|velours|travertin|marbre|plastique|rotin",
    "material_details": "D√©tails pr√©cis du mat√©riau (ex: ch√™ne massif, acier inoxydable, velours c√¥tel√©)",
    "color": "blanc|noir|gris|beige|marron|bleu|vert|rouge|jaune|orange|rose|violet|naturel|ch√™ne|noyer|taupe",
    "color_details": "Nuances pr√©cises de couleur (ex: gris anthracite, beige sable, bleu marine)",
    "finish": "Finition surface (mat|brillant|satin√©|bross√©|laqu√©|naturel)",
    "style": "moderne|contemporain|scandinave|industriel|vintage|rustique|classique|minimaliste|boh√®me",
    "design_details": "D√©tails design sp√©cifiques (lignes, formes, inspirations)",
    "room": "salon|chambre|cuisine|bureau|salle √† manger|entr√©e|terrasse",
    "capacity": "X personnes/places/tiroirs/√©tag√®res (TOUT ce qui est quantifiable)",
    "comfort_level": "Niveau de confort si √©valuable (ferme|moyen|moelleux)",
    "maintenance": "Instructions d'entretien si mentionn√©es"
  },
  "pricing_analysis": {
    "current_price": ${product.price || 0},
    "original_price": ${product.compare_at_price || product.compareAtPrice || 'null'},
    "has_promotion": ${!!(product.compare_at_price || product.compareAtPrice)},
    "discount_percentage": "Calcul du pourcentage de remise si promotion",
    "price_positioning": "entr√©e de gamme|milieu de gamme|haut de gamme",
    "value_proposition": "Argument de valeur principal pour le client"
  },
  "features": {
    "convertible": true/false,
    "storage": true/false,
    "angle_reversible": true/false,
    "adjustable": true/false,
    "foldable": true/false,
    "extendable": true/false,
    "removable_covers": true/false,
    "wheels": true/false,
    "stackable": true/false,
    "modular": true/false,
    "eco_friendly": true/false
  },
  "seo_marketing": {
    "seo_title": "Titre SEO OPTIMIS√â avec mots-cl√©s principaux ‚â§70 caract√®res",
    "seo_description": "Meta description VENDEUSE avec b√©n√©fices client ‚â§155 caract√®res",
    "ad_headline": "Titre publicitaire ACCROCHEUR ‚â§30 caract√®res",
    "ad_description": "Description pub PERSUASIVE avec promotion si applicable ‚â§90 caract√®res",
    "tags": ["5-8 tags SEO optimis√©s"],
    "google_product_category": "ID Google Shopping pr√©cis (635=Canap√©s, 443=Tables, 436=Chaises, 569=Lits)",
    "selling_points": ["3-5 arguments de vente principaux"],
    "target_keywords": ["Mots-cl√©s de recherche principaux"]
  },
  "ai_confidence": {
    "overall": "Score global 0-100",
    "color": "Confiance couleur 0-100",
    "style": "Confiance style 0-100", 
    "dimensions": "Confiance dimensions 0-100",
    "material": "Confiance mat√©riau 0-100",
    "category": "Confiance cat√©gorie 0-100",
    "pricing": "Confiance analyse prix 0-100",
    "features": "Confiance fonctionnalit√©s 0-100"
  }
}

R√àGLES STRICTES POUR MAXIMUM D'EXACTITUDE:
- Utilise UNIQUEMENT les valeurs list√©es pour material, color, style, room, product_type
- dimensions: Format EXACT avec unit√©s (L:200cm x l:100cm x H:75cm) - extraire TOUTES les dimensions
- subcategory: Description COMPL√àTE avec TOUS les d√©tails techniques
- material_details: Sp√©cifier le type exact (ex: "ch√™ne massif europ√©en", "velours c√¥tel√© italien")
- color_details: Nuances pr√©cises (ex: "gris anthracite mat", "beige sable naturel")
- seo_title: Inclure marque + mod√®le + mat√©riau + couleur + b√©n√©fice
- seo_description: USP + mat√©riaux + dimensions + livraison + promo si applicable
- selling_points: Arguments de vente CONCRETS et PERSUASIFS
- tags: 5-8 mots-cl√©s SEO OPTIMIS√âS pour recherche client
- ai_confidence: Scores R√âALISTES 0-100 pour chaque attribut
- pricing_analysis: ANALYSER si promotion et calculer % remise
- value_proposition: Argument principal pour convaincre le client

R√âPONSE JSON UNIQUEMENT:`;

    const response = await fetch('https://api.deepseek.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${deepseekApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en mobilier et design d\'int√©rieur avec 20 ans d\'exp√©rience. Tu analyses CHAQUE d√©tail des produits avec une pr√©cision maximale. Tu enrichis COMPL√àTEMENT les produits au format JSON strict avec TOUS les attributs demand√©s. Sois TR√àS pr√©cis et d√©taill√©. Aucun texte suppl√©mentaire.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1200,
        temperature: 0.1,
        stream: false
      }),
    });

    if (response.ok) {
      const data = await response.json();
      const content = data.choices[0]?.message?.content?.trim();
      
      if (content) {
        try {
          const enriched = JSON.parse(content);
          console.log('‚úÖ [advanced-enricher] Extraction DeepSeek r√©ussie:', {
            product: (product.name || product.title)?.substring(0, 30),
            category: enriched.general_info?.product_type,
            subcategory: enriched.general_info?.subcategory,
            has_promotion: enriched.pricing_analysis?.has_promotion,
            discount: enriched.pricing_analysis?.discount_percentage,
            confidence: enriched.ai_confidence?.overall
          });
          
          return enriched;
        } catch (parseError) {
          console.log('‚ö†Ô∏è [advanced-enricher] JSON invalide, fallback basique');
        }
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è [advanced-enricher] Erreur DeepSeek, fallback basique:', error);
  }

  return extractBasicAttributes(product);
}

async function extractImageAttributes(imageUrl: string, textAttributes: EnrichedAttributes) {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openaiApiKey) {
    console.log('‚ö†Ô∏è [advanced-enricher] OpenAI non configur√© pour analyse image');
    return null;
  }

  try {
    console.log('üëÅÔ∏è [advanced-enricher] Analyse image avec OpenAI Vision...');

    const prompt = `Tu es un expert en mobilier avec 20 ans d'exp√©rience. Analyse cette image de produit mobilier avec une PR√âCISION MAXIMALE et extrait TOUS les attributs visuels d√©tectables au format JSON :

Contexte du produit (depuis le texte) :
- Type: ${textAttributes.general_info.product_type}
- Couleur d√©tect√©e: ${textAttributes.technical_specs.color}
- Mat√©riau d√©tect√©: ${textAttributes.technical_specs.material}
- Style d√©tect√©: ${textAttributes.technical_specs.style}
- Prix: ${textAttributes.pricing_analysis?.current_price || 0}‚Ç¨
- Promotion: ${textAttributes.pricing_analysis?.has_promotion ? 'Oui' : 'Non'}

ANALYSE VISUELLE APPROFONDIE - Extrait/corrige ces attributs visuels avec MAXIMUM de d√©tails :
{
  "visual_attributes": {
    "dominant_colors": ["couleur principale", "couleur secondaire", "couleur accent"],
    "color_nuances": ["Nuances pr√©cises: gris anthracite, beige sable, etc."],
    "materials_visible": ["TOUS les mat√©riaux visibles dans l'image"],
    "material_details": ["D√©tails mat√©riaux: grain du bois, texture tissu, finition m√©tal"],
    "style_visual": "Style EXACT visible: moderne|contemporain|scandinave|industriel|vintage|rustique|classique",
    "design_elements": ["√âl√©ments design sp√©cifiques: pieds, accoudoirs, dossier, etc."],
    "shape": "Forme pr√©cise: rond|carr√©|rectangulaire|ovale|angle|asym√©trique",
    "texture": "Texture visible: lisse|rugueux|brillant|mat|textur√©|grain√©|satin√©",
    "finish": "Finition surface: naturel|laqu√©|bross√©|patin√©|vieilli|huil√©|cir√©",
    "hardware_visible": ["Quincaillerie visible: poign√©es, charni√®res, pieds, etc."],
    "proportions": "Proportions visuelles: √©lanc√©|trapu|√©quilibr√©|massif",
    "lighting_context": "√âclairage de la photo: naturel|artificiel|studio",
    "background_context": "Contexte arri√®re-plan pour comprendre l'usage"
  },
  "dimensions_estimate": {
    "relative_size": "Taille relative: petit|moyen|grand|tr√®s grand",
    "proportions": "Proportions: compact|standard|g√©n√©reux|sur-mesure",
    "scale_indicators": ["√âl√©ments donnant l'√©chelle dans l'image"],
    "estimated_dimensions": "Estimation dimensions si pas dans texte"
  },
  "quality_indicators": {
    "build_quality": "Qualit√© construction: entr√©e de gamme|standard|premium|luxe",
    "design_complexity": "Complexit√© design: simple|√©labor√©|sophistiqu√©|avant-gardiste",
    "craftsmanship": "Qualit√© artisanale visible: industriel|artisanal|haute couture",
    "innovation_level": "Niveau innovation: classique|moderne|innovant|r√©volutionnaire"
  },
  "usage_context": {
    "target_audience": "Cible: jeunes|familles|seniors|professionnels",
    "lifestyle_fit": "Style de vie: urbain|familial|minimaliste|luxueux",
    "room_integration": "Int√©gration pi√®ce: central|d'appoint|multifonction"
  },
  "confidence_scores": {
    "color_accuracy": "0-100 confiance couleur",
    "material_accuracy": "0-100 confiance mat√©riau", 
    "style_accuracy": "0-100 confiance style",
    "dimensions_accuracy": "0-100 confiance dimensions",
    "quality_accuracy": "0-100 confiance qualit√©",
    "overall_visual_confidence": "0-100 confiance globale analyse visuelle"
  }
}

INSTRUCTIONS CRITIQUES:
- Examine CHAQUE pixel de l'image avec attention d'expert
- Corrige les attributs texte si l'image montre quelque chose de diff√©rent
- Sois TR√àS pr√©cis sur les couleurs (nuances exactes)
- Identifie TOUS les mat√©riaux visibles
- Analyse la qualit√© de construction visible
- Estime les dimensions si possible
- D√©tecte TOUTES les fonctionnalit√©s visibles

R√âPONSE JSON UNIQUEMENT:`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en analyse visuelle de mobilier avec 20 ans d\'exp√©rience. Tu examines chaque d√©tail avec une pr√©cision d\'expert. Tu extrais TOUS les attributs visuels d√©tectables au format JSON avec maximum de pr√©cision. Aucun texte suppl√©mentaire.'
          },
          {
            role: 'user',
            content: [
              {
                type: "text",
                text: prompt
              },
              {
                type: "image_url",
                image_url: { url: imageUrl, detail: 'high' }
              }
            ]
          }
        ],
        max_tokens: 800,
        temperature: 0.1,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      const content = data.choices[0]?.message?.content?.trim();
      
      if (content) {
        try {
          const imageAnalysis = JSON.parse(content);
          console.log('‚úÖ [advanced-enricher] Analyse image r√©ussie:', {
            colors: imageAnalysis.visual_attributes?.dominant_colors?.length || 0,
            materials: imageAnalysis.visual_attributes?.materials_visible?.length || 0,
            confidence: imageAnalysis.confidence_scores?.overall_visual_confidence || 0
          });
          return imageAnalysis;
        } catch (parseError) {
          console.log('‚ö†Ô∏è [advanced-enricher] JSON image invalide');
        }
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è [advanced-enricher] Erreur analyse image:', error);
  }

  return null;
}

function mergeAttributes(textAttributes: EnrichedAttributes, imageAttributes: any): EnrichedAttributes {
  if (!imageAttributes) {
    return textAttributes;
  }

  // Enhanced merging with priority to visual accuracy
  const merged = { ...textAttributes };
  
  // Update color with visual analysis (prioritize if high confidence)
  if (imageAttributes.visual_attributes?.dominant_colors?.length > 0) {
    const visualConfidence = imageAttributes.confidence_scores?.color_accuracy || 0;
    const textConfidence = merged.ai_confidence?.color || 0;
    
    if (visualConfidence > textConfidence || visualConfidence > 85) {
      merged.technical_specs.color = imageAttributes.visual_attributes.dominant_colors[0];
      merged.technical_specs.color_details = imageAttributes.visual_attributes.color_nuances?.[0] || merged.technical_specs.color_details;
      merged.ai_confidence.color = Math.max(visualConfidence, textConfidence);
    }
  }
  
  // Update material with visual analysis
  if (imageAttributes.visual_attributes?.materials_visible?.length > 0) {
    const visualConfidence = imageAttributes.confidence_scores?.material_accuracy || 0;
    const textConfidence = merged.ai_confidence?.material || 0;
    
    if (visualConfidence > textConfidence || visualConfidence > 85) {
      merged.technical_specs.material = imageAttributes.visual_attributes.materials_visible[0];
      merged.technical_specs.material_details = imageAttributes.visual_attributes.material_details?.[0] || merged.technical_specs.material_details;
      merged.ai_confidence.material = Math.max(visualConfidence, textConfidence);
    }
  }
  
  // Update style with visual analysis
  if (imageAttributes.visual_attributes?.style_visual) {
    const visualConfidence = imageAttributes.confidence_scores?.style_accuracy || 0;
    const textConfidence = merged.ai_confidence?.style || 0;
    
    if (visualConfidence > textConfidence || visualConfidence > 85) {
      merged.technical_specs.style = imageAttributes.visual_attributes.style_visual;
      merged.technical_specs.design_details = imageAttributes.visual_attributes.design_elements?.join(', ') || merged.technical_specs.design_details;
      merged.ai_confidence.style = Math.max(visualConfidence, textConfidence);
    }
  }
  
  // Add visual-only attributes
  if (imageAttributes.visual_attributes?.finish) {
    merged.technical_specs.color = imageAttributes.visual_attributes.dominant_colors[0];
    merged.ai_confidence.color = imageAttributes.confidence_scores.color_accuracy;
    merged.technical_specs.finish = imageAttributes.visual_attributes.finish;
  }
  
  // Add quality indicators from visual analysis
  if (imageAttributes.quality_indicators?.build_quality) {
    merged.pricing_analysis = merged.pricing_analysis || {};
    merged.pricing_analysis.price_positioning = imageAttributes.quality_indicators.build_quality;
  }
  
  // Add usage context
  if (imageAttributes.usage_context) {
    merged.seo_marketing.target_keywords = [
      ...(merged.seo_marketing.target_keywords || []),
      ...(imageAttributes.usage_context.target_audience ? [imageAttributes.usage_context.target_audience] : []),
      ...(imageAttributes.usage_context.lifestyle_fit ? [imageAttributes.usage_context.lifestyle_fit] : [])
    ];
  }
  
  // Enhanced overall confidence calculation
  const confidenceValues = Object.values(merged.ai_confidence).filter(v => typeof v === 'number' && v > 0);
  merged.ai_confidence.overall = Math.round(
    confidenceValues.length > 0 ? confidenceValues.reduce((sum, val) => sum + val, 0) / confidenceValues.length : 50
  );
  
  // Add visual confidence bonus
  if (imageAttributes.confidence_scores?.overall_visual_confidence > 80) {
    merged.ai_confidence.overall = Math.min(merged.ai_confidence.overall + 10, 100);
  }
  
  return merged;
}

function extractBasicAttributes(product: any): EnrichedAttributes {
  const text = `${product.name || product.title || ''} ${product.description || ''} ${product.category || product.productType || ''}`.toLowerCase();
  
  // Enhanced promotion detection
  const currentPrice = parseFloat(product.price) || 0;
  const originalPrice = parseFloat(product.compare_at_price || product.compareAtPrice) || 0;
  const hasPromotion = originalPrice > currentPrice && originalPrice > 0;
  const discountPercentage = hasPromotion ? Math.round(((originalPrice - currentPrice) / originalPrice) * 100) : 0;
  
  // Detect category and subcategory
  let productType = 'Mobilier';
  let subcategory = '';
  
  // Enhanced category detection with priority for specific types
  if (text.includes('lit') || text.includes('bed') || text.includes('sommier')) {
    productType = 'Lit';
    const features = [];
    if (text.includes('m√©tal') || text.includes('acier')) features.push('en m√©tal');
    if (text.includes('sommier')) features.push('avec sommier');
    if (text.includes('90x190') || text.includes('140x190') || text.includes('160x200')) features.push('multi-tailles');
    if (text.includes('noir') && text.includes('blanc')) features.push('noir/blanc');
    if (text.includes('minimaliste')) features.push('design minimaliste');
    
    subcategory = features.length > 0 ? `Lit ${features.join(' ')}` : 'Lit en m√©tal';
  } else if (text.includes('canap√©') || text.includes('sofa')) {
    productType = 'Canap√©';
    // Enhanced subcategory detection
    const features = [];
    if (text.includes('angle')) features.push('d\'angle');
    if (text.includes('convertible')) features.push('convertible');
    if (text.includes('r√©versible')) features.push('r√©versible');
    if (text.includes('places')) {
      const placesMatch = text.match(/(\d+)\s*places?/);
      if (placesMatch) features.push(`${placesMatch[1]} places`);
    }
    if (text.includes('velours')) features.push('velours');
    if (text.includes('c√¥tel√©')) features.push('c√¥tel√©');
    if (text.includes('coffre')) features.push('avec coffre');
    
    subcategory = features.length > 0 ? `Canap√© ${features.join(' ')}` : 'Canap√© fixe';
  } else if (text.includes('table')) {
    productType = 'Table';
    const tableFeatures = [];
    if (text.includes('basse')) tableFeatures.push('basse');
    if (text.includes('manger') || text.includes('repas')) tableFeatures.push('√† manger');
    if (text.includes('bureau')) tableFeatures.push('de bureau');
    if (text.includes('ronde')) tableFeatures.push('ronde');
    if (text.includes('rectangulaire')) tableFeatures.push('rectangulaire');
    if (text.includes('extensible')) tableFeatures.push('extensible');
    if (text.includes('travertin')) tableFeatures.push('travertin');
    if (text.includes('marbre')) tableFeatures.push('marbre');
    
    subcategory = tableFeatures.length > 0 ? `Table ${tableFeatures.join(' ')}` : 'Table';
  } else if (text.includes('chaise') || text.includes('fauteuil')) {
    productType = 'Chaise';
    const chairFeatures = [];
    if (text.includes('bureau')) chairFeatures.push('de bureau');
    if (text.includes('fauteuil')) chairFeatures.push('fauteuil');
    if (text.includes('bar')) chairFeatures.push('de bar');
    if (text.includes('chenille')) chairFeatures.push('chenille');
    if (text.includes('m√©tal')) chairFeatures.push('m√©tal');
    if (text.includes('pivotant')) chairFeatures.push('pivotant');
    if (text.includes('r√©glable')) chairFeatures.push('r√©glable');
    
    subcategory = chairFeatures.length > 0 ? `Chaise ${chairFeatures.join(' ')}` : 'Chaise';
  }

  // Enhanced attribute detection with more precision
  const colorPatterns = [
    { name: 'blanc', patterns: ['blanc', 'white', 'ivoire', 'cr√®me', '√©cru'] },
    { name: 'noir', patterns: ['noir', 'black', 'anthracite', 'charbon'] },
    { name: 'gris', patterns: ['gris', 'grey', 'gray', 'argent', 'platine'] },
    { name: 'beige', patterns: ['beige', 'sable', 'lin', 'naturel', 'nude'] },
    { name: 'marron', patterns: ['marron', 'brown', 'chocolat', 'moka', 'cognac', 'caramel'] },
    { name: 'bleu', patterns: ['bleu', 'blue', 'marine', 'navy', 'cobalt', 'turquoise'] },
    { name: 'vert', patterns: ['vert', 'green', 'olive', 'sauge', '√©meraude'] },
    { name: 'rouge', patterns: ['rouge', 'red', 'bordeaux', 'cerise', 'carmin'] },
    { name: 'ch√™ne', patterns: ['ch√™ne', 'oak', 'ch√™ne clair', 'ch√™ne fonc√©'] },
    { name: 'noyer', patterns: ['noyer', 'walnut'] },
    { name: 'taupe', patterns: ['taupe', 'greige'] }
  ];

  const materialPatterns = [
    { name: 'acier', patterns: ['acier', 'steel', 'm√©tal', 'metal'] },
    { name: 'bois', patterns: ['bois', 'wood', 'massif'] },
    { name: 'ch√™ne', patterns: ['ch√™ne', 'oak'] },
    { name: 'm√©tal', patterns: ['m√©tal', 'metal', 'fer'] },
    { name: 'verre', patterns: ['verre', 'glass', 'cristal'] },
    { name: 'tissu', patterns: ['tissu', 'fabric', 'textile'] },
    { name: 'cuir', patterns: ['cuir', 'leather'] },
    { name: 'velours', patterns: ['velours', 'velvet', 'c√¥tel√©'] },
    { name: 'travertin', patterns: ['travertin', 'travertine'] },
    { name: 'marbre', patterns: ['marbre', 'marble'] },
    { name: 'chenille', patterns: ['chenille'] }
  ];

  const stylePatterns = [
    { name: 'moderne', patterns: ['moderne', 'modern', 'contemporain'] },
    { name: 'minimaliste', patterns: ['minimaliste', 'minimal', '√©pur√©', 'simple'] },
    { name: 'scandinave', patterns: ['scandinave', 'scandinavian', 'nordique'] },
    { name: 'industriel', patterns: ['industriel', 'industrial', 'loft'] },
    { name: 'vintage', patterns: ['vintage', 'r√©tro', 'ancien'] },
    { name: 'classique', patterns: ['classique', 'classic', 'traditionnel'] },
    { name: 'contemporain', patterns: ['contemporain', 'contemporary'] }
  ];

  const detectedColor = colorPatterns.find(cp => cp.patterns.some(p => text.includes(p)))?.name || '';
  const detectedMaterial = materialPatterns.find(mp => mp.patterns.some(p => text.includes(p)))?.name || '';
  const detectedStyle = stylePatterns.find(sp => sp.patterns.some(p => text.includes(p)))?.name || '';
  
  // Enhanced room detection with priority for beds
  const rooms = productType === 'Lit' ? ['chambre'] : ['salon', 'chambre', 'cuisine', 'bureau', 'salle √† manger', 'entr√©e'];
  const detectedRoom = rooms.find(room => text.includes(room)) || '';

  // Extract dimensions
  let dimensions = '';
  
  // Bed dimension patterns (90x190, 140x190, 160x200)
  const bedDimensionMatch = text.match(/(\d+)x(\d+)\s*cm/g);
  if (bedDimensionMatch && productType === 'Lit') {
    dimensions = bedDimensionMatch.join(', ');
  } else {
    // Standard dimension patterns
    const dimensionMatch = text.match(/(\d+)\s*[x√ó]\s*(\d+)(?:\s*[x√ó]\s*(\d+))?\s*cm/);
    dimensions = dimensionMatch ? 
      (dimensionMatch[3] ? `L:${dimensionMatch[1]}cm x l:${dimensionMatch[2]}cm x H:${dimensionMatch[3]}cm` : 
       `L:${dimensionMatch[1]}cm x l:${dimensionMatch[2]}cm`) : '';
  }

  // Enhanced feature detection
  const features = {
    convertible: text.includes('convertible'),
    storage: text.includes('rangement') || text.includes('coffre') || text.includes('tiroir'),
    angle_reversible: text.includes('r√©versible') || text.includes('angle'),
    adjustable: text.includes('r√©glable') || text.includes('ajustable'),
    foldable: text.includes('pliable') || text.includes('pliant'),
    extendable: text.includes('extensible') || text.includes('rallonge'),
    removable_covers: text.includes('d√©houssable') || text.includes('housse'),
    wheels: text.includes('roulettes') || text.includes('roulant'),
    stackable: text.includes('empilable'),
    modular: text.includes('modulaire') || text.includes('modulable'),
    eco_friendly: text.includes('√©cologique') || text.includes('durable') || text.includes('fsc'),
    assembly_required: text.includes('monter') || text.includes('assemblage') || text.includes('montage'),
    integrated_base: text.includes('sommier') || text.includes('base int√©gr√©e'),
    metal_frame: text.includes('structure') && (text.includes('m√©tal') || text.includes('acier'))
  };

  // Generate SEO content
  const productName = product.name || product.title || 'Produit';
  const brand = product.vendor || product.brand || 'Decora Home';
  
  // Enhanced SEO generation
  const colorDetail = detectedColor ? ` ${detectedColor}` : '';
  const materialDetail = detectedMaterial ? ` en ${detectedMaterial}` : '';
  const promotionText = hasPromotion ? ` -${discountPercentage}%` : '';
  
  const sellingPoints = [
    hasPromotion ? `Promotion -${discountPercentage}%` : null,
    detectedMaterial ? `Mat√©riau ${detectedMaterial}` : null,
    detectedColor ? `Couleur ${detectedColor}` : null,
    features.convertible ? 'Convertible' : null,
    features.storage ? 'Avec rangement' : null,
    features.assembly_required ? 'Montage facile' : null,
    features.integrated_base ? 'Sommier int√©gr√©' : null,
    features.metal_frame ? 'Structure robuste' : null,
    'Livraison gratuite',
    'Garantie qualit√©'
  ].filter(Boolean);
  
  return {
    general_info: {
      title: `${productName}${colorDetail}${materialDetail}`,
      brand: brand,
      product_type: productType,
      subcategory: subcategory,
      product_line: extractProductLine(productName),
      model_name: extractModelName(productName)
    },
    technical_specs: {
      dimensions: dimensions,
      material_details: `${detectedMaterial}${materialDetail}`,
      color_details: `${detectedColor}${colorDetail}`,
      design_details: `Style ${detectedStyle || 'contemporain'}`,
      material: detectedMaterial,
      color: detectedColor,
      style: detectedStyle,
      room: detectedRoom,
      weight: extractWeight(text),
      assembly_time: extractAssemblyTime(text),
      warranty: extractWarranty(text),
      comfort_level: extractComfortLevel(text),
      maintenance: extractMaintenance(text)
    },
    pricing_analysis: {
      current_price: currentPrice,
      original_price: originalPrice > 0 ? originalPrice : null,
      has_promotion: hasPromotion,
      discount_percentage: hasPromotion ? `${discountPercentage}%` : null,
      price_positioning: currentPrice < 200 ? 'entr√©e de gamme' : currentPrice > 800 ? 'haut de gamme' : 'milieu de gamme',
      value_proposition: hasPromotion ? `√âconomisez ${discountPercentage}% !` : 'Excellent rapport qualit√©-prix'
    },
    features: features,
    seo_marketing: {
      seo_title: `${productName}${colorDetail}${materialDetail}${promotionText} - ${brand}`.substring(0, 70),
      seo_description: `${productName}${materialDetail}${colorDetail}. ${detectedStyle ? 'Style ' + detectedStyle + '. ' : ''}${hasPromotion ? `PROMO -${discountPercentage}% ! ` : ''}Livraison gratuite. ${brand}.`.substring(0, 155),
      ad_headline: `${productName}${promotionText}`.substring(0, 30),
      ad_description: `${productName}${materialDetail}${colorDetail}. ${hasPromotion ? `PROMO -${discountPercentage}% !` : 'Qualit√© premium !'}`.substring(0, 90),
      tags: [
        productType.toLowerCase(),
        detectedColor,
        detectedMaterial,
        detectedStyle,
        detectedRoom,
        hasPromotion ? 'promotion' : null,
        hasPromotion ? 'promo' : null,
        productType === 'Lit' ? 'chambre' : null,
        features.assembly_required ? 'montage' : null,
        'livraison gratuite'
      ].filter(Boolean),
      google_product_category: getGoogleCategory(productType),
      selling_points: sellingPoints,
      target_keywords: [
        productType.toLowerCase(),
        detectedColor,
        detectedMaterial,
        detectedStyle,
        detectedRoom,
        brand.toLowerCase()
      ].filter(Boolean)
    },
    ai_confidence: {
      overall: Math.min(85, 50 + (detectedColor ? 10 : 0) + (detectedMaterial ? 15 : 0) + (dimensions ? 15 : 0) + (detectedStyle ? 5 : 0)),
      color: detectedColor ? 90 : 30,
      style: detectedStyle ? 85 : 30,
      dimensions: dimensions ? 95 : 20,
      material: detectedMaterial ? 90 : 30,
      category: productType !== 'Mobilier' ? 95 : 60,
      pricing: hasPromotion ? 95 : 80,
      features: Object.values(features).some(Boolean) ? 85 : 40
    }
  };
}

// Helper functions for enhanced extraction
function extractProductLine(productName: string): string {
  const linePatterns = ['ALYANA', 'AUREA', 'INAYA', 'VENTU'];
  return linePatterns.find(line => productName.toUpperCase().includes(line)) || '';
}

function extractModelName(productName: string): string {
  const modelMatch = productName.match(/([A-Z]{3,})/);
  return modelMatch ? modelMatch[1] : '';
}

function extractWeight(text: string): string {
  const weightMatch = text.match(/(\d+(?:[.,]\d+)?)\s*kg/);
  return weightMatch ? `${weightMatch[1]} kg` : '';
}

function extractAssemblyTime(text: string): string {
  const timeMatch = text.match(/(?:montage|assemblage)\s*:?\s*(\d+)\s*(?:min|h)/);
  return timeMatch ? `${timeMatch[1]} ${timeMatch[0].includes('h') ? 'h' : 'min'}` : '';
}

function extractWarranty(text: string): string {
  const warrantyMatch = text.match(/(?:garantie|warranty)\s*:?\s*(\d+)\s*(ans?|mois)/);
  return warrantyMatch ? `${warrantyMatch[1]} ${warrantyMatch[2]}` : '';
}

function extractComfortLevel(text: string): string {
  if (text.includes('tr√®s confortable') || text.includes('moelleux')) return 'moelleux';
  if (text.includes('ferme')) return 'ferme';
  if (text.includes('confortable')) return 'moyen';
  return '';
}

function extractMaintenance(text: string): string {
  const maintenanceTerms = [];
  if (text.includes('d√©houssable')) maintenanceTerms.push('d√©houssable');
  if (text.includes('lavable')) maintenanceTerms.push('lavable');
  if (text.includes('nettoyage √† sec')) maintenanceTerms.push('nettoyage √† sec');
  return maintenanceTerms.join(', ');
}

function extractFabricFromMaterial(material: string): string {
  const fabricMappings: { [key: string]: string } = {
    'tissu': 'tissu',
    'velours': 'velours',
    'cuir': 'cuir',
    'lin': 'lin',
    'coton': 'coton',
    'chenille': 'chenille',
    'polyester': 'polyester'
  };
  
  return fabricMappings[material.toLowerCase()] || '';
}

function generateHandle(title: string): string {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim()
    .substring(0, 100);
}

function getGoogleCategory(productType: string): string {
  const categoryMappings: { [key: string]: string } = {
    'Canap√©': '635',
    'Table': '443', 
    'Chaise': '436',
    'Lit': '569',
    'Rangement': '6552',
    'Meuble TV': '6552',
    'D√©coration': '696',
    '√âclairage': '594'
  };
  
  return categoryMappings[productType] || '';
}

async function updateEnrichmentMetadata(supabase: any, metadata: any) {
  try {
    await supabase
      .from('ai_training_metadata')
      .upsert({
        id: 'singleton',
        last_training: metadata.execution_time,
        products_count: metadata.products_processed,
        training_type: `enrichment_${metadata.source}`,
        model_version: '2.1-advanced',
        updated_at: metadata.execution_time
      }, { onConflict: 'id' });

    console.log('‚úÖ [advanced-enricher] M√©tadonn√©es mises √† jour');
  } catch (error) {
    console.error('‚ùå [advanced-enricher] Erreur m√©tadonn√©es:', error);
  }
}